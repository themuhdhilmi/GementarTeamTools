generator client {
    // provider = "prisma-dbml-generator"
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String
    email           String    @unique
    hashed_password String
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    group           Group     @relation(fields: [groupId], references: [id])
    groupId         String
    projects        Project[]
}

model Group {
    id         String       @id
    name       String
    permission Permission[]
    user       User[]
}

model Permission {
    id         Int            @id
    permission PermissionList
    group      Group[]
}

enum PermissionList {
    LOGIN

    PAGE_PERMISSION_ADMIN
    PAGE_PERMISSION_GROUP_SETTINGS
    PAGE_PERMISSION_USER_SETTINGS

    ADMIN

    PAGE_PERMISSION_CYPRESS_REPORT
    NOT_PERMISSION
}

model Project {
    id           String   @id @default(cuid())
    name         String
    participants User[]
    results      Result[]
}

model Result {
    id        String  @id @default(cuid())
    name      String
    project   Project @relation(fields: [projectId], references: [id])
    date      DateTime
    projectId String
    data      Json?
    s3Files S3File[]
}

model S3File {
    id          String   @id @default(cuid())
    fileName    String
    remark      String?
    bucketName  String
    contentType String
    fileUrl     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Result      Result?  @relation(fields: [resultId], references: [id])
    resultId    String?
}
