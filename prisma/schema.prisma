// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    // provider = "prisma-dbml-generator"
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String          @id @default(cuid())
    name            String
    email           String          @unique
    hashed_password String
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    group           Group           @relation(fields: [groupId], references: [id])
    groupId         String
    assignedClaim   AssignedClaim[]
}

model Group {
    id         String       @id
    permission Permission[]
    user       User[]
}

model Permission {
    id         Int            @id
    permission PermissionList
    group      Group[]
}

enum PermissionList {
    LOGIN
    LOGOUT
    REQUEST_CLAIM
    ASSIGN_CLAIM

    GET_USER_CLAIMS
    GET_SELF_CLAIMS

    PAGE_PERMISSION_REIMBURSEMENT
    PAGE_PERMISSION_REIMBURSEMENT_DASHBOARD
    PAGE_PERMISSION_REIMBURSEMENT_MANAGE_CLAIM

    PAGE_PERMISSION_CYPRESS_REPORT
}

model ClaimCategory {
    id            String          @id @default(cuid())
    name          String
    assignedClaim AssignedClaim[]
}

model AssignedClaim {
    id              String           @id @default(cuid())
    value           Float
    perClaimLimit   Float?
    isPerMonth      Boolean          @default(false)
    isCustomDate    Boolean          @default(false)
    dateStart       DateTime?
    dateEnd         DateTime?
    year            Int
    claimCategory   ClaimCategory    @relation(fields: [claimCategoryId], references: [id])
    requestedClaim  RequestedClaim[]
    user            User?            @relation(fields: [userId], references: [id])
    userId          String?
    claimCategoryId String
}

enum RequestedClaimStatus {
    PENDING
    APPROVED
    REJECTED
}

model RequestedClaim {
    id              String               @id @default(cuid())
    value           Float
    status          RequestedClaimStatus @default(PENDING)
    AssignedClaim   AssignedClaim?       @relation(fields: [assignedClaimId], references: [id])
    assignedClaimId String?
}
