{
  "stats": {
    "suites": 20,
    "tests": 121,
    "passes": 105,
    "pending": 0,
    "failures": 16,
    "testsRegistered": 121,
    "passPercent": 86.77685950413223,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-05-19T11:04:28.218Z",
    "end": "2025-05-19T11:48:21.187Z",
    "duration": 2632969
  },
  "results": [
    {
      "uuid": "49dd569e-0d85-4ea5-8dfe-a0d927c08786",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1012.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1012.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a18c26a6-1d9f-45cd-9d1c-ff8651c6a341",
          "title": "Payee Sync",
          "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1012.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1012.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1012",
              "fullTitle": "Payee Sync TC1012",
              "timedOut": null,
              "duration": 187144,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nModule: Talent and Rights\nLast Updated: Adlina (24/2/2025), Adlina (5/2/2025)\nHigh Level Steps:\n    1. Add New Talent - Corporation\n    2. Create Master\n    3. Add Talent to Master\n    4. Process Check Run\n    5. Check Talent Batch\n    6. \"Corporation\" will sync to a Work Authorization with Work Authorization Type of \"Corporation\"\n*/\n// Step 1 : Add New Talent - Corporation\nconst talentType = 'Corporation';\ncy.generateTalents(talentType).then(() => {\n    cy.readFile('src/fixtures/talent-data.json').then(() => {\n        cy.createNewMultiTalents(talentType);\n    });\n});\n// Step 2 : Create Master\ncy.createTalentMaster();\n// Step 3 : Add Talent to Master\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    const masterID = talents.masterID;\n    const talentName = talents.corpName1;\n    const talentId = talents.talentIDCorporation;\n    cy.addCasttoTalentMaster(masterID, talentName, talentType, talentId);\n    // Step 4 : Create Payment - Process Check Run\n    cy.createTalentPayment(masterID, [`${talents.corpFName} ${talents.corpLName} [${talentName}]`]);\n    // Update PaymentDetails\n    cy.updatePaymentDetails();\n    cy.processPayment();\n    // Create Check Run\n    cy.submitCheckRun();\n});\n// Step 5 : Check Talent Batch\ncy.checkTalentbatch();\n// Step 6 : Check Payee Sync\ncy.visit(`${this.urls.payeeSearch}`);\ncy.get('header.page-heading', { timeout: 50000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    // Search for Payee\n    cy.get('input[name=\"taxId\"]', { timeout: 60000 }).should('be.visible').type(talents.feinCorporation);\n});\n// Search\ncy.contains('button', 'Search').click({ force: true });\ncy.get('div.k-loading-mask', { timeout: 5000 }).should('not.exist');\ncy.wait(5000);\n// Click the record - Corp ID hyperlink\ncy.get('td[data-kendo-grid-column-index=\"2\"]').first().find('a').click();\n// Click Work Authorization tab\ncy.contains('a', 'Work Authorizations', { timeout: 60000 }).click({ force: true });\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\n// Work Authorization on Default - Corporation\ncy.get('.search-results table tbody tr').each(($row) => {\n    cy.wrap($row).find('td').eq(7).invoke('text').should('include', 'Corporation');\n});",
              "err": {
                "message": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                "estack": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n    at Object.<anonymous> (https://app.uat2-extremereach.com/adbridge/tal/talent/reference:3382:66)\n    at Object.<anonymous> (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43860)\n    at fire (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:42035)\n    at Object.fireWith [as resolveWith] (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43186)\n    at done (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:128488)\n    at XMLHttpRequest.callback (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:134223)",
                "diff": null
              },
              "uuid": "4d55c6ff-efff-4832-879b-f1494de06bcd",
              "parentUUID": "a18c26a6-1d9f-45cd-9d1c-ff8651c6a341",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4d55c6ff-efff-4832-879b-f1494de06bcd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 187144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "73bf59a9-b487-4b42-9e62-526e2be16414",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1013.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1013.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "114ef10e-7835-4947-a030-fb7683886bf9",
          "title": "Payee Sync",
          "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1013.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1013.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1013",
              "fullTitle": "Payee Sync TC1013",
              "timedOut": null,
              "duration": 124214,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nModule: Talent and Rights\nLast Updated: Adlina (24/2/2025), Adlina (5/2/2025)\nHigh Level Steps:\n    1. Add New Talent - Vendor\n    2. Add Talent to Master\n    3. Process Check Run\n    4. \"Vendor\" will sync to a Work Authorization with Work Authorization Type of \"Client Vendor\"\n*/\n// Step 1 : Add New Talent - Vendor\nconst talentType = 'Vendor';\ncy.generateTalents(talentType).then(() => {\n    cy.readFile('src/fixtures/talent-data.json').then(() => {\n        cy.createNewMultiTalents(talentType);\n    });\n});\n// Step 2 : Add Talent to Master\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    const masterID = talents.masterID;\n    const talentName = talents.vendName2;\n    const talentId = talents.talentIDVend;\n    cy.addCasttoTalentMaster(masterID, talentName, talentType, talentId);\n    // Step 3 : Create Payment - Process Check Run\n    cy.createTalentPayment(masterID, [`[${talentName}]`]);\n    // Update PaymentDetails\n    cy.updatePaymentDetails();\n    cy.processPayment();\n    // Step 4: Create Check Run\n    cy.submitCheckRun();\n});\n// Step 5 : Check Talent Batch\ncy.checkTalentbatch();\n// Step 4: Check Payee Sync\ncy.visit(`${this.urls.payeeSearch}`);\ncy.get('header.page-heading', { timeout: 50000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    // Search for Payee\n    cy.get('input[name=\"taxId\"]', { timeout: 60000 }).should('be.visible').type(talents.feinVendor);\n});\n// Search\ncy.contains('button', 'Search').click({ force: true });\ncy.get('div.k-loading-mask', { timeout: 5000 }).should('not.exist');\ncy.wait(5000);\n// Click the record - Vendor ID hyperlink\ncy.get('td[data-kendo-grid-column-index=\"2\"]').first().find('a').click();\n// Click Work Authorization tab\ncy.contains('a', 'Work Authorizations', { timeout: 60000 }).click({ force: true });\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\n// Work Authorization on Default - Client Vendor\ncy.get('.search-results table tbody tr').each(($row) => {\n    cy.wrap($row).find('td').eq(7).invoke('text').should('include', 'Client_Vendor');\n});",
              "err": {
                "message": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                "estack": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n    at Object.<anonymous> (https://app.uat2-extremereach.com/adbridge/tal/talent/reference:3382:66)\n    at Object.<anonymous> (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43860)\n    at fire (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:42035)\n    at Object.fireWith [as resolveWith] (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43186)\n    at done (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:128488)\n    at XMLHttpRequest.callback (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:134223)",
                "diff": null
              },
              "uuid": "5690e1fe-ead2-4ecd-b2d4-cce5b6946a57",
              "parentUUID": "114ef10e-7835-4947-a030-fb7683886bf9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5690e1fe-ead2-4ecd-b2d4-cce5b6946a57"
          ],
          "pending": [],
          "skipped": [],
          "duration": 124214,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5467f838-847e-4fe0-82b0-645ed7db5529",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1014.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1014.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8ae77c7e-a363-470a-b38a-46fffb628eeb",
          "title": "Payee Sync",
          "fullFile": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1014.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\payee-sync-TC1014.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1014",
              "fullTitle": "Payee Sync TC1014",
              "timedOut": null,
              "duration": 132896,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nModule: Talent and Rights\nLast Updated: Adlina (24/2/2025), Adlina (5/2/2025)\nHigh Level Steps:\n    1. Add New Talent - Agent\n    2. Add Talent to Master\n    3. Process Check Run\n    4. Check for Talent Batch\n    5. \"Agent\" will sync to a Work Authorization with Work Authorization Type of \"Agent\"\n*/\n// Step 1 : Add New Talent - Agent\nconst talentType = 'Agent';\ncy.generateTalents(talentType).then(() => {\n    cy.readFile('src/fixtures/talent-data.json').then(() => {\n        cy.createNewMultiTalents(talentType);\n    });\n});\n// Step 2 : Add Talent to Master\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    const masterID = talents.masterID;\n    const talentName = talents.agtName3;\n    const talentId = talents.talentIDAgent;\n    cy.addCasttoTalentMaster(masterID, talentName, talentType, talentId);\n    // Step 3: Process Payment - Check Run\n    cy.createTalentPayment(masterID, [`[${talentName}]`]);\n    // Update PaymentDetails\n    cy.updatePaymentDetails();\n    cy.processPayment();\n    // Step 4: Create Check Run\n    cy.submitCheckRun();\n});\n// Step 5 : Check Talent Batch\ncy.checkTalentbatch();\n// Step 6 : Check Payee Sync\ncy.visit(`${this.urls.payeeSearch}`);\ncy.get('header.page-heading', { timeout: 50000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\n// Search for Payee\ncy.readFile('src/fixtures/talent-data.json').then((talents) => {\n    // Search for Payee\n    cy.get('input[name=\"taxId\"]', { timeout: 60000 }).should('be.visible').type(talents.feinAgent);\n});\n// Search\ncy.contains('button', 'Search').click({ force: true });\ncy.get('div.k-loading-mask', { timeout: 5000 }).should('not.exist');\ncy.wait(5000);\n// Click the record - Agent ID hyperlink\ncy.get('td[data-kendo-grid-column-index=\"2\"]').first().find('a').click();\n// Click Work Authorization tab\ncy.contains('a', 'Work Authorizations', { timeout: 60000 }).click({ force: true });\ncy.get('.spinner-threedots', { timeout: 60000 }).should('be.visible');\ncy.get('.spinner-threedots', { timeout: 60000 }).should('not.be.visible');\n// Work Authorization on Default - Client Vendor\ncy.get('.search-results table tbody tr').each(($row) => {\n    cy.wrap($row).find('td').eq(7).invoke('text').should('include', 'Agent');\n});",
              "err": {
                "message": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                "estack": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n    at Object.<anonymous> (https://app.uat2-extremereach.com/adbridge/tal/talent/reference:3382:66)\n    at Object.<anonymous> (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43860)\n    at fire (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:42035)\n    at Object.fireWith [as resolveWith] (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43186)\n    at done (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:128488)\n    at XMLHttpRequest.callback (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:134223)",
                "diff": null
              },
              "uuid": "4ced4dba-5d96-4886-a515-29a96495e290",
              "parentUUID": "8ae77c7e-a363-470a-b38a-46fffb628eeb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4ced4dba-5d96-4886-a515-29a96495e290"
          ],
          "pending": [],
          "skipped": [],
          "duration": 132896,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "740b3072-954b-46b5-bfa2-f8dba28f473b",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-advices-TC1019.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-advices-TC1019.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6082aa1c-dcfa-4595-97c7-4e7b749c2d89",
          "title": "Talent-Advices",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-advices-TC1019.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-advices-TC1019.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1019",
              "fullTitle": "Talent-Advices TC1019",
              "timedOut": null,
              "duration": 14214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (05/02/2025)\nModule : Talent Rights Regressions\nHigh Level Test Step :\n1. Visit Talent & Rights page > Talent Advices\n2. Use type Foreign should be changed to Foreign Use for AFTRA radio\nForeign\" has been changed to \"Foreign use\" on the Use Type dropdown for AFTRA radio Talent Advices\n*/\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/tal/Talent/TalentAdvices#!/');\ncy.get('.page-heading h1', { timeout: 90000 }).should('exist').and('have.text', 'Talent Advices');\ncy.get('select#searchCriteria\\\\.TalentAdviceUseType', { timeout: 90000 }).should('be.visible');\ncy.get('select#searchCriteria\\\\.TalentAdviceUseType option').then(($options) => {\n    const optionTexts = $options.map((_, option) => Cypress.$(option).text().trim()).get();\n    const foreignOptions = optionTexts.filter((text) => text.toLowerCase().includes('foreign'));\n    cy.log('Filtered Foreign Options: ', JSON.stringify(foreignOptions, null, 2));\n    console.log('Filtered Foreign Options:', foreignOptions);\n    expect(foreignOptions).to.include('Foreign Use'); // Ensure \"Foreign Use\" is present\n});\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "bf310ea1-088e-40df-b7c4-d859b86970c0",
              "parentUUID": "6082aa1c-dcfa-4595-97c7-4e7b749c2d89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf310ea1-088e-40df-b7c4-d859b86970c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14214,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c25428ed-e55a-4ae5-bc3f-7d71495e17de",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-contracts-TC1074-TC1077.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-contracts-TC1074-TC1077.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "93ae247b-2940-4d2c-b31a-cdcf7201feb9",
          "title": "Talent Contracts",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-contracts-TC1074-TC1077.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-contracts-TC1074-TC1077.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1074 - Create XR- SAG AFTRA Audio Contract",
              "fullTitle": "Talent Contracts TC1074 - Create XR- SAG AFTRA Audio Contract",
              "timedOut": null,
              "duration": 49328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTalentContract(testData.contractTypes.audio);",
              "err": {},
              "uuid": "5c976869-d7eb-47c5-aa6a-88f6af1a8499",
              "parentUUID": "93ae247b-2940-4d2c-b31a-cdcf7201feb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1076 - Create XR- SAG AFTRA Principals Contract",
              "fullTitle": "Talent Contracts TC1076 - Create XR- SAG AFTRA Principals Contract",
              "timedOut": null,
              "duration": 44668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTalentContract(testData.contractTypes.principal);",
              "err": {},
              "uuid": "b6e46cb1-03c4-416f-a719-a65c993f0a9f",
              "parentUUID": "93ae247b-2940-4d2c-b31a-cdcf7201feb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1077 - Create XR- SAG AFTRA Extras Contract",
              "fullTitle": "Talent Contracts TC1077 - Create XR- SAG AFTRA Extras Contract",
              "timedOut": null,
              "duration": 35738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createTalentContract(testData.contractTypes.extra);",
              "err": {},
              "uuid": "7003aea5-6edb-4fe4-a612-85bf18a027c0",
              "parentUUID": "93ae247b-2940-4d2c-b31a-cdcf7201feb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c976869-d7eb-47c5-aa6a-88f6af1a8499",
            "b6e46cb1-03c4-416f-a719-a65c993f0a9f",
            "7003aea5-6edb-4fe4-a612-85bf18a027c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129734,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4825f611-2a4b-4446-8533-31ed1b704f74",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-library-TC1061.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-library-TC1061.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b0bfb086-ca48-42e9-8cdf-4cb0e59e86fe",
          "title": "Talent-Library",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-library-TC1061.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-library-TC1061.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1061",
              "fullTitle": "Talent-Library TC1061",
              "timedOut": null,
              "duration": 21018,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (10/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Library\n    2. I9 Update needed for Platform Talent Contracts\n    The I9 form has been updated.\n      */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/tal/resources/external');\ncy.get('h1', { timeout: 90000 }).should('contain.text', 'Talent Resource Library');\ncy.get('#FormsTipsFAQ-tab', { timeout: 90000 }).should('be.visible').click();\ncy.contains('h4', 'Talent Contracts', { timeout: 90000 }).should('be.visible');\ncy.get('.card-header.list-group-item-info h4', { timeout: 90000 }).contains('Talent Contracts').should('be.visible');\ncy.get('.card-block ul li a', { timeout: 90000 })\n    .should('be.visible')\n    .each(($el) => {\n    cy.wrap($el)\n        .invoke('text')\n        .then((text) => {\n        cy.log(`📄 Contract: ${text.trim()}`);\n    });\n});\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "baff99ab-c45e-4abc-8c0b-c6c96652adfd",
              "parentUUID": "b0bfb086-ca48-42e9-8cdf-4cb0e59e86fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "baff99ab-c45e-4abc-8c0b-c6c96652adfd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21018,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4b17e648-9bfc-4d73-972e-70b6b4eb9efc",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1020.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1020.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce6c3f72-98f1-4640-97fc-f5766bb6a657",
          "title": "Talent-Masters",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1020.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1020.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1020",
              "fullTitle": "Talent-Masters TC1020",
              "timedOut": null,
              "duration": 19381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (05/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Master\n    2. when Media = Non Union, remove requirement for Media Sub Type\n    Media Sub Type doesn't default to Non Union, but it is on the dropdown list.\n    The field is still required\n    516531 Currently, users are not able to select a media subtype for non union masters.\n    This needs to be updated to allow selection of the new non union subtypes to match what is\n    available on the completion report.\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/cs/talent/masters/create/general');\ncy.get('h1', { timeout: 90000 }).should('be.visible').and('contain.text', 'New Commercial Master ');\ncy.get('h4', { timeout: 90000 }).should('be.visible').should('contain.text', 'Master Details');\ncy.get('input[placeholder=\"Type to search\"]', { timeout: 90000 }).first().type('Test', { delay: 100 }).should('have.value', 'Test');\ncy.get('.dropdown-menu', { timeout: 90000 }).should('be.visible');\ncy.contains('.dropdown-item', 'AdBridge TEST').should('be.visible').click();\ncy.get('select#advertiserId', { timeout: 90000 }).select('AdBridge TEST');\ncy.get('button.btn.btn-success[name=\"submit\"]', { timeout: 5000 }).should('be.visible').click();\n//Media Type. The field is still required\ncy.get('div.ernotify-box-inner', { timeout: 5000 })\n    .should('be.visible')\n    .and('contain', 'Please fill out all required fields before continuing.');\ncy.get('select[name=\"commercialMaster.unionReportType\"]', { timeout: 5000 }).should('be.visible').select('Non Union');\ncy.get('select[name=\"commercialMaster.unionReportSubType\"] option', { timeout: 5000 }).then(($options) => {\n    const optionTexts = $options.map((index, option) => Cypress.$(option).text()).get();\n    const expectedOptions = [\n        'Non-Union TV',\n        'Non-Union Internet',\n        'Non-Union Industrial',\n        'Non-Union New Media',\n        'Non-Union Radio',\n        'Non Union'\n    ];\n    expectedOptions.forEach((option) => {\n        expect(optionTexts).to.include(option);\n    });\n});\ncy.get('select[name=\"commercialMaster.unionReportSubType\"]', { timeout: 5000 }).select('Non-Union TV');\ncy.get('button.btn.btn-success[name=\"submit\"]', { timeout: 5000 }).should('be.visible').click();\ncy.get('h4', { timeout: 5000 }).contains('Edit Versions').should('be.visible');\ncy.contains('button', 'Update', { timeout: 5000 }).should('be.visible').click();\ncy.get('div.col-3.left', { timeout: 5000 })\n    .find('span.value')\n    .first()\n    .then(($span) => {\n    const mediaTypeText = $span.text();\n    cy.log('Media Type:', mediaTypeText);\n});\ncy.get('div.col-3.left', { timeout: 5000 })\n    .find('span.value')\n    .eq(1)\n    .then(($span) => {\n    const mediaSubTypeText = $span.text();\n    cy.log('Media SubType:', mediaSubTypeText);\n});\ncy.get('.ernotify-corner', { timeout: 90000 }).should('not.exist');\ncy.get('.ernotify-type-warning', { timeout: 90000 }).should('not.exist');\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "b266af94-5b25-4239-9b4b-bc45aec8ba4e",
              "parentUUID": "ce6c3f72-98f1-4640-97fc-f5766bb6a657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b266af94-5b25-4239-9b4b-bc45aec8ba4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19381,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3ea99f81-db93-4f7f-87ce-2daad353d0aa",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1041.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1041.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51964025-0e70-45f3-8330-582589390825",
          "title": "Talent-Masters",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1041.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-masters-TC1041.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1041",
              "fullTitle": "Talent-Masters TC1041",
              "timedOut": null,
              "duration": 15292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (05/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Master\n    2. Checkmark in creative code list is not aligned\n    Add green checkbox inside of the field\n    Ticket 565844:\n    Found during regression testing, the edit creative codes list for the commercial master has a check mark when the ad id is valid, the checkmark is not aligned properly.\n    Current behavior: Green checkboxes that show when ad id is valid are not aligned (see Justin's screenshot in notes below)\n    Expected behavior: Add green checkbox inside of the field\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/tal/talent/masters/80144/general');\ncy.get('h1[data-animation=\"false\"]', { timeout: 90000 }).should('exist').should('be.visible');\ncy.get('div[data-animation=\"false\"]', { timeout: 90000 }).find('span').first().click();\ncy.get('.modal-header', { timeout: 90000 }).should('be.visible').should('contain', 'Edit Versions');\ncy.get('div[data-animation=\"false\"]', { timeout: 90000 })\n    .first()\n    .within(() => {\n    cy.get('i.fa.fa-check-circle.text-success', { timeout: 90000 })\n        .should('be.visible')\n        .should('exist')\n        .and('have.css', 'color', 'rgb(0, 133, 77)'); // Verify the green color\n});\ncy.get('button.close').should('be.visible').click();\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "4f70997e-cd1c-4ebf-9052-3131b4b86315",
              "parentUUID": "51964025-0e70-45f3-8330-582589390825",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f70997e-cd1c-4ebf-9052-3131b4b86315"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15292,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "25f85886-33ce-4887-aeee-f2c81a82eac0",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-payments-TC1038-TC1049.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-payments-TC1038-TC1049.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "babbe030-6c22-485c-8537-d4948575178a",
          "title": "Talent-Payment",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-payments-TC1038-TC1049.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-payments-TC1038-TC1049.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1049",
              "fullTitle": "Talent-Payment TC1049",
              "timedOut": null,
              "duration": 114929,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (25/02/2025)\nModule : Talent Rights Regressions\nHigh Level Test Step :\n1. NU Session Timelist - Remove Work Type\nRemove the Work Type column from the non-union session timelist. Also remove the requirement that a value be entered.\n*/\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('adbridge/tal/talent/masters/640548/general');\ncy.get('.page-heading h1', { timeout: 90000 }).should('be.visible');\ncy.contains('label', 'Unions:')\n    .next('.left.data')\n    .find('.value')\n    .invoke('text')\n    .then((text) => {\n    const extractedText = text.trim(); // Clean up whitespace\n    cy.log('Extracted Union Status: ' + extractedText);\n    expect(extractedText).to.equal('Non-Union');\n});\n//check and update last date production\ncy.get('button.btn-edit-details', { timeout: 90000 }).first().should('be.visible').click();\ncy.get('.modal-header h4', { timeout: 90000 }).should('have.text', 'Master Details');\ncy.get('.modal-header', { timeout: 90000 }).should('be.visible');\ncy.get('form[name=\"masterGeneralForm\"]', { timeout: 90000 }).should('be.visible');\ncy.get('input[placeholder=\"Last Production Date\"]')\n    .invoke('val')\n    .then((val) => {\n    if (!val) {\n        // If empty, enter a new date\n        const newDate = '2020-03-20'; // Adjust format based on the application\n        cy.get('input[placeholder=\"Last Production Date\"]', { timeout: 90000 }).clear().type(newDate).blur();\n    }\n});\ncy.get('button[name=\"submit\"]', { timeout: 90000 }).click();\ncy.get('div.left.data span.value', { timeout: 90000 }).should('be.visible').should('not.be.empty');\ncy.get('button.btn.btn-primary', { timeout: 90000 }).click();\ncy.get('.ernotify-box.ernotify-type-success', { timeout: 90000 }).should('be.visible');\ncy.wait(2000); //wait for alert to disappear\ncy.contains('button', 'Create Payment', { timeout: 90000 }).should('be.visible').click();\ncy.contains('.modal-header h4', 'Create Payment', { timeout: 90000 }).should('be.visible').click();\ncy.get(':nth-child(1) > .text-center > .fa', { timeout: 90000 }).should('be.visible').click(); //becky\ncy.get(':nth-child(8) > .text-center > .fa', { timeout: 90000 }).should('be.visible').click(); //don\ncy.get('.modal-footer > .btn-success', { timeout: 90000 }).click(); //click Create payment\ncy.get('body', { timeout: 90000 }).then(($body) => {\n    if ($body.find('.spinner-threedots').length > 0) {\n        cy.get('.spinner-threedots', { timeout: 10000 }).should('not.be.visible');\n    }\n});\ncy.get('.page-heading h1', { timeout: 90000 }).should('be.visible'); //general\ncy.get('input[ng-model=\"payment.PONumber\"]', { timeout: 90000 }).clear().type('BONEAF23003'); //PO Number\ncy.get('input[ng-model=\"payment.EstimateNumber\"]', { timeout: 90000 }).should('not.be.disabled').clear().type('12345'); //Estimate Number\ncy.get('input[ng-model=\"inputModel\"]', { timeout: 90000 }).first().clear().type('02/21/2025').type('{enter}'); //Due Date\ncy.get('input[ng-model=\"payment.TimetoInvoice\"]', { timeout: 90000 }).clear().type('7'); //Time to Invoice (In hours)\ncy.get('input[name=\"jobNumber.JobNumber\"]', { timeout: 90000 }).should('not.be.disabled').clear().type('5'); //Job Number\ncy.get('input[name=\"jobNumber.AllocationPercentage\"]', { timeout: 90000 }).should('not.be.disabled').clear().type('100'); //%\ncy.get('select[name=\"vm.use.PaymentType\"]', { timeout: 90000 }).should('be.visible').select('1099 Payment'); //Media Type\ncy.get('select#payment\\\\.PayrollWageAmountSet\\\\.Currency', { timeout: 90000 }).should('be.visible').select('USD - US Dollar'); //Payroll Currency\ncy.get('select[ng-model=\"vm.use.PaymentType\"]', { timeout: 90000 }).should('be.visible').select('Non-Union'); //Payment Type\ncy.get('select[ng-model=\"vm.use.TalentAdviceUseType\"]', { timeout: 90000 }).should('be.visible').select('NonUnion Renewal'); //use type\ncy.get('a.btn.btn-primary[ng-click=\"savePayment()\"]', { timeout: 90000 }).should('be.visible').click({ force: true });\ncy.wait(5000); //wait for loading\ncy.contains('a', 'Session Details', { timeout: 90000 }).should('be.visible').click();\ncy.get('table.table.table-striped.table-condensed.table-form', { timeout: 90000 }).should('exist');\n//system will prompt error if Performer information is empty\ncy.get('a.btn.btn-secondary[ng-click=\"updateToReady()\"]', { timeout: 90000 })\n    .should('be.visible')\n    .should('not.be.disabled')\n    .click({ force: true });\ncy.on('window:confirm', (text) => {\n    cy.log('Window Confirm Text:', text); // Log the confirmation message\n    return true; // Accept the confirmation alert\n});\ncy.wait(2000); //wait for alert to disappear\ncy.get('a[data-original-title=\"Edit Time List\"]', { timeout: 90000 }).first().click({ force: true });\ncy.get('.modal-header', { timeout: 90000 })\n    .should('be.visible')\n    .then(($modal) => {\n    if ($modal.text().includes('Work Type')) {\n        cy.log('✅ \"Work Type\" is available inside the modal.');\n    }\n    else {\n        cy.log('❌ Verify: \"Work Type\" is NOT available!');\n    }\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `.ernotify-box.ernotify-type-success`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `.ernotify-box.ernotify-type-success`, but never found it.\n    at Context.eval (webpack:///./src/e2e/kl/1000-regression/talent-payments-TC1038-TC1049.cy.ts:51:72)",
                "diff": null
              },
              "uuid": "b766ed38-34c1-4a12-b0a7-b5d04216e2d9",
              "parentUUID": "babbe030-6c22-485c-8537-d4948575178a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1038",
              "fullTitle": "Talent-Payment TC1038",
              "timedOut": null,
              "duration": 90178,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (24/02/2025)\nModule : Talent Rights Regressions\nHigh Level Test Step :\n1. Non-Union Session Timelist - Require Start/End Times OR Total Hours Worked\n*/\ncy.get('.modal-header', { timeout: 90000 }).should('be.visible');\ncy.get('.alert.alert-warning', { timeout: 90000 }).should('contain', 'Caution: this feature is not complete.');\ncy.get('input[type=\"radio\"][ng-model=\"ctrl.castMember.CastMemberSession.Exempt\"]', { timeout: 90000 })\n    .check({ force: true })\n    .should('be.checked');\ncy.get('a.btn.btn-lg.btn-success', { timeout: 90000 })\n    .should('be.visible')\n    .and('contain', 'Add Date to Get Started')\n    .click({ force: true });\nconst today = new Date();\nconst formattedDate = `${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}/${today.getFullYear()}`;\ncy.get('.modal-dialog').find('input[ng-model=\"inputModel\"]').type(formattedDate, { force: true }).blur();\ncy.get('input[ng-model=\"sessionDay.WorkStartTime\"]', { timeout: 90000 }).type('8', { force: true }).blur();\ncy.get('input[ng-model=\"sessionDay.WorkEndTime\"]', { timeout: 90000 }).type('17', { force: true }).blur();\ncy.get('input[ng-model=\"sessionDay.TotalWages\"]', { timeout: 90000 }).clear().type('2500').blur();\ncy.wait(2000);\ncy.get('input[ng-model=\"sessionDay.WorkHours\"]', { timeout: 90000 })\n    .should('be.visible')\n    .invoke('val')\n    .then((workHours) => {\n    cy.log('Work Hours:', workHours);\n});\ncy.get('.modal-dialog', { timeout: 90000 })\n    .should('be.visible')\n    .find('a.btn.btn-primary')\n    .should('be.visible')\n    .and('contain', 'Update')\n    .first()\n    .click({ force: true }); // Force click if necessary\ncy.wait(2000); //wait for loading\ncy.get('a.btn.btn-primary[ng-click=\"savePayment()\"]', { timeout: 90000 }).should('be.visible').click({ force: true });",
              "err": {
                "message": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `.modal-header`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `.modal-header`, but never found it.\n    at Context.eval (webpack:///./src/e2e/kl/1000-regression/talent-payments-TC1038-TC1049.cy.ts:107:50)",
                "diff": null
              },
              "uuid": "8990417f-ea3e-4a5a-8d99-af6f2aa2add3",
              "parentUUID": "babbe030-6c22-485c-8537-d4948575178a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1040",
              "fullTitle": "Talent-Payment TC1040",
              "timedOut": null,
              "duration": 92266,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (24/02/2025)\nModule : Talent Rights Regressions\nHigh Level Test Step :\n1. Non-Union Session Timelist\tExclude Agents for Timesheet Requirement\n*/\ncy.wait(2000); //wait for loading\ncy.get('table.table.table-striped.table-condensed.table-form', { timeout: 90000 }).should('exist');\ncy.get('a[data-original-title=\"Edit Time List\"]', { timeout: 90000 }).eq(1).click({ force: true });\ncy.get('.modal-header', { timeout: 90000 }).should('be.visible');\ncy.get('.alert.alert-warning', { timeout: 90000 }).should('contain', 'Caution: this feature is not complete.');\ncy.wait(5000); //wait for loading\ncy.get('a.btn.btn-lg.btn-success', { timeout: 90000 }).should('be.visible').and('contain', 'Add Date to Get Started').click();\nconst today = new Date();\nconst formattedDate = `${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}/${today.getFullYear()}`;\ncy.get('.modal-dialog').find('input[ng-model=\"inputModel\"]').type(formattedDate, { force: true }).blur();\ncy.get('input[ng-model=\"sessionDay.TotalWages\"]', { timeout: 90000 }).clear().type('300').blur();\ncy.get('.modal-dialog', { timeout: 90000 })\n    .should('be.visible')\n    .find('a.btn.btn-primary')\n    .should('be.visible')\n    .and('contain', 'Update')\n    .first()\n    .click({ force: true }); // Force click if necessary\ncy.get('a.btn.btn-primary[ng-click=\"savePayment()\"]', { timeout: 90000 }).should('be.visible').click({ force: true });\ncy.wait(2000);\ncy.contains('a', 'General', { timeout: 90000 }).should('be.visible').click();\nconst month = (today.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero if needed\nconst day = today.getDate().toString().padStart(2, '0'); // Add leading zero if needed\nconst year = today.getFullYear();\nconst formattedToday = `${month}/${day}/${year}`; // Format the date as &today/month/year\ncy.get('.input-group > datepicker-auto.ng-pristine > div > .ng-valid-required', { timeout: 90000 })\n    .should('not.be.disabled')\n    .invoke('removeAttr', 'disabled')\n    .first()\n    .click({ force: true })\n    .type(formattedToday, { force: true })\n    .type('{enter}', { force: true }); // Force press Enter\ncy.wait(2000);\ncy.get('.input-group > datepicker-auto.ng-pristine > div > .ng-valid-required', { timeout: 90000 })\n    .first()\n    .should('have.value', formattedToday);\ncy.wait(2000); //wait for loading\nconst futureDate = new Date(); // Calculate the future date (2 months after today)\nfutureDate.setMonth(futureDate.getMonth() + 2);\nconst formattedFutureDate = futureDate.toLocaleDateString('en-US'); // Format the future date as MM/DD/YYYY\ncy.get(':nth-child(2) > .form-group > datepicker-auto.ng-pristine > div > .ng-valid-required', { timeout: 90000 })\n    .should('not.be.disabled')\n    .invoke('removeAttr', 'disabled')\n    .clear()\n    .type(`${formattedFutureDate}{enter}`, { force: true }); // Type the future date and press Enter\ncy.wait(2000); //wait for loading\ncy.get(':nth-child(2) > .form-group > datepicker-auto.ng-pristine > div > .ng-valid-required', { timeout: 90000 }).should('have.value', formattedFutureDate);\ncy.wait(2000); //wait for loading\ncy.get('a.btn.btn-info[ng-if=\"permissionFlags.canCalculateWages\"]', { timeout: 90000 }).contains('Calculate').click(); //calculate\ncy.on('window:confirm', () => { });\ncy.wait(2000); //wait for loading\ncy.contains('a', 'Session Details', { timeout: 90000 }).should('be.visible').click();\ncy.get('table.table.table-striped.table-condensed.table-form', { timeout: 90000 }).should('exist');\ncy.wait(2000); //wait for loading\ncy.get('tr.cast-member.ng-scope', { timeout: 90000 })\n    .first()\n    .find('td.ng-binding')\n    .then(($cells) => {\n    const name2Column = $cells.eq(0).text().trim();\n    const gross2Column = $cells.eq(3).text().trim();\n    cy.log('Name:', name2Column);\n    cy.log('Gross Amount:', gross2Column);\n    if (gross2Column !== '2500') {\n        cy.log('ERROR: Gross Amount is not equal to 2500');\n    }\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `table.table.table-striped.table-condensed.table-form`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `table.table.table-striped.table-condensed.table-form`, but never found it.\n    at Context.eval (webpack:///./src/e2e/kl/1000-regression/talent-payments-TC1038-TC1049.cy.ts:147:89)",
                "diff": null
              },
              "uuid": "205945b9-f60a-40ab-b0c5-46a1b2133459",
              "parentUUID": "babbe030-6c22-485c-8537-d4948575178a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1044",
              "fullTitle": "Talent-Payment TC1044",
              "timedOut": null,
              "duration": 95289,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (24/02/2025)\nModule : Talent Rights Regressions\nHigh Level Test Step :\n1. Non-Union Session Timelist\tExclude Agents for Timesheet Requirement\n*/\ncy.wait(5000); //wait for loading\ncy.get('a.btn.btn-info[ng-if=\"permissionFlags.canCalculateWages\"]', { timeout: 90000 }).contains('Calculate').click(); //calculate\ncy.on('window:confirm', () => { });\ncy.wait(2000); //wait for loading\ncy.get('a.btn.btn-secondary[ng-click=\"updateToReady()\"]', { timeout: 90000 })\n    .should('be.visible')\n    .should('not.be.disabled')\n    .click({ force: true });\ncy.on('window:confirm', () => { });\ncy.wait(2000); //wait for loading\ncy.get('.md-buttons > .btn', { timeout: 90000 }).then(($button) => {\n    if ($button.length) {\n        cy.wrap($button).click();\n    }\n    else {\n        cy.log('Button not available, skipping');\n    }\n});\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {
                "message": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `a.btn.btn-info[ng-if=\"permissionFlags.canCalculateWages\"]`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 90000ms: Expected to find element: `a.btn.btn-info[ng-if=\"permissionFlags.canCalculateWages\"]`, but never found it.\n    at Context.eval (webpack:///./src/e2e/kl/1000-regression/talent-payments-TC1038-TC1049.cy.ts:221:0)",
                "diff": null
              },
              "uuid": "f98b448f-eedc-4144-8cbf-230aff330c1f",
              "parentUUID": "babbe030-6c22-485c-8537-d4948575178a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b766ed38-34c1-4a12-b0a7-b5d04216e2d9",
            "8990417f-ea3e-4a5a-8d99-af6f2aa2add3",
            "205945b9-f60a-40ab-b0c5-46a1b2133459",
            "f98b448f-eedc-4144-8cbf-230aff330c1f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 392662,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "19f9a7b2-3daf-40d5-a831-fc9568a840e3",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-pre-invoices-TC015.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-pre-invoices-TC015.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "217fcbdc-095b-46f1-801d-00c0c17b0b7b",
          "title": "Talent Pre-Invoicing",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-pre-invoices-TC015.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-pre-invoices-TC015.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC015",
              "fullTitle": "Talent Pre-Invoicing TC015",
              "timedOut": null,
              "duration": 12172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\nModule: Talent and Rights\nLast Updated: Adlina (10/03/2025)\nHigh Level Steps:\n    1. Go to Menu Invoices\n    2. Verify Payment Status to be Draft Invoice\n    3. Search Payment Status = Draft Invoice\n    4. Only invoices with status Draft Invoice is listed\n*/\n// Steps 1: Go to Menu Invoices\ncy.visit(`${this.urls.invoices}`);\n// Step 2: Verify Payment Status to be Draft Invoice\ncy.get('select[name=\"PaymentStatuses\"]').contains('option', 'Draft Invoice').should('be.visible');\ncy.get('select[name=\"PaymentStatuses\"]').select('Draft Invoice');\n// Step 3: Search Payment Status = Draft Invoice\ncy.contains('button', 'Search').click();\n// Step 4: Only invoices with status Draft Invoice is listed\ncy.get('table tbody tr').each(($row) => {\n    cy.wrap($row).find('td').eq(11).should('contain.text', 'Draft Invoice');\n});",
              "err": {},
              "uuid": "ee5c0e4a-93e1-4baf-ad22-53881e416e79",
              "parentUUID": "217fcbdc-095b-46f1-801d-00c0c17b0b7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee5c0e4a-93e1-4baf-ad22-53881e416e79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12172,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "83c9cdae-ae6a-43c9-9f2f-2d685296c275",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1001-TC1066.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1001-TC1066.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
          "title": "Talent & Rights",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1001-TC1066.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1001-TC1066.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC001",
              "fullTitle": "Talent & Rights TC001",
              "timedOut": null,
              "duration": 28892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for US Citizen\n   Expected: System able to create new talent for US Citizen */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\n// cy.get('div.progress-bar.progress-bar-striped.active', { timeout: 60000 }).should('not.exist');\ncy.contains('label', 'U.S. Citizen').should('be.visible').find('input[name=\"ctrl.talentType\"][value=\"1\"]').should('be.checked');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst ssn = generateRandomNumber();\nconst ssnWithoutHyphens = ssn.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.SocialSecurityNumber\"]').clear().type(ssn);\nconst firstName = faker_1.faker.person.firstName();\nconst lastName = faker_1.faker.person.lastName();\nconst fullName = `${firstName} ${lastName}`;\ncy.get('[name=\"ctrl.talent.FirstName\"]').type(firstName);\ncy.get('[name=\"ctrl.talent.LastName\"]').type(lastName);\ncy.wait(5000);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(5000);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('CA (California)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.FirstName || ctrl.talent.MiddleName || ctrl.talent.LastName || ctrl.talent.Suffix\"]')\n    .should('be.visible')\n    .invoke('text')\n    .then((displayedText) => {\n    const normalizedText = displayedText.replace(/\\s+/g, ' ').trim();\n    expect(normalizedText).to.eq(fullName);\n});\ncy.get('dd[ng-show=\"ctrl.talent.SocialSecurityNumber\"]').contains(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(10000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.SocialSecurityNumber\"]').type(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(2)\n    .invoke('text')\n    .then((firstNameText) => {\n    expect(firstNameText.trim()).to.equal(firstName);\n});\ncy.get('td')\n    .eq(3)\n    .invoke('text')\n    .then((lastNameText) => {\n    expect(lastNameText.trim()).to.equal(lastName);\n});",
              "err": {},
              "uuid": "fd9985b9-c1e9-4765-b93f-c8d755620d82",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC002",
              "fullTitle": "Talent & Rights TC002",
              "timedOut": null,
              "duration": 29581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for corporations\n   Expected: System able to create new talent for corporations  */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\ncy.get('[value=\"2\"]').click();\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst ssn = generateRandomNumber();\nconst ssnWithoutHyphens = ssn.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.SocialSecurityNumber\"]').first().clear().type(ssn);\nconst firstName = faker_1.faker.person.firstName();\nconst lastName = faker_1.faker.person.lastName();\nconst fullName = `${firstName} ${lastName}`;\ncy.get('[name=\"ctrl.talent.FirstName\"]').type(firstName);\ncy.get('[name=\"ctrl.talent.LastName\"]').type(lastName);\nconst fein = generateRandomNumber2();\nconst feinWithoutHyphens = fein.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.CorporationFein\"]').clear().type(fein);\nconst randomCompanyName = generateRandomCompanyName();\ncy.get('[name=\"ctrl.talent.CorporationName\"]').type(randomCompanyName);\ncy.wait(5000);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(5000);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('CA (California)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.CorporationName\"]').contains(randomCompanyName);\ncy.get('dd[ng-show=\"ctrl.talent.CorporationFein\"]').contains(feinWithoutHyphens);\ncy.get('dd[ng-show=\"ctrl.talent.FirstName || ctrl.talent.MiddleName || ctrl.talent.LastName || ctrl.talent.Suffix\"]')\n    .should('be.visible')\n    .invoke('text')\n    .then((displayedText) => {\n    const normalizedText = displayedText.replace(/\\s+/g, ' ').trim();\n    expect(normalizedText).to.eq(fullName);\n});\ncy.get('dd[ng-show=\"ctrl.talent.SocialSecurityNumber\"]').contains(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(10000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.SocialSecurityNumber\"]').type(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(2)\n    .invoke('text')\n    .then((firstNameText) => {\n    expect(firstNameText.trim()).to.equal(firstName);\n});\ncy.get('td')\n    .eq(3)\n    .invoke('text')\n    .then((lastNameText) => {\n    expect(lastNameText.trim()).to.equal(lastName);\n});",
              "err": {},
              "uuid": "ac4fd52f-879a-439f-a016-a2c3e41a9bc1",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC003",
              "fullTitle": "Talent & Rights TC003",
              "timedOut": null,
              "duration": 18865,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for Foreign Citizen\n   Expected: System able to create new talent for Foreign Citizen   */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\ncy.contains('label', 'Foreign Citizen')\n    .should('be.visible')\n    .find('input[name=\"ctrl.talentType\"][value=\"3\"]')\n    .click()\n    .should('be.checked');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst ssn = generateRandomNumber();\nconst ssnWithoutHyphens = ssn.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.SocialSecurityNumber\"]').first().clear().type(ssn);\nconst firstName = faker_1.faker.person.firstName();\nconst lastName = faker_1.faker.person.lastName();\nconst fullName = `${firstName} ${lastName}`;\ncy.get('[name=\"ctrl.talent.FirstName\"]').type(firstName);\ncy.get('[name=\"ctrl.talent.LastName\"]').type(lastName);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].CountryId\"]').select('CA - Canada');\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('BC (British Columbia)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.FirstName || ctrl.talent.MiddleName || ctrl.talent.LastName || ctrl.talent.Suffix\"]')\n    .should('be.visible')\n    .invoke('text')\n    .then((displayedText) => {\n    const normalizedText = displayedText.replace(/\\s+/g, ' ').trim();\n    expect(normalizedText).to.eq(fullName);\n});\ncy.get('dd[ng-show=\"ctrl.talent.SocialSecurityNumber\"]').contains(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(10000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.SocialSecurityNumber\"]').type(ssnWithoutHyphens);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(2)\n    .invoke('text')\n    .then((firstNameText) => {\n    expect(firstNameText.trim()).to.equal(firstName);\n});\ncy.get('td')\n    .eq(3)\n    .invoke('text')\n    .then((lastNameText) => {\n    expect(lastNameText.trim()).to.equal(lastName);\n});",
              "err": {},
              "uuid": "4844d68b-ff8c-4deb-92e1-41fef3766a10",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC004",
              "fullTitle": "Talent & Rights TC004",
              "timedOut": null,
              "duration": 28170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for Canadian\n   Expected: System able to create new talent for Canadian   */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\ncy.wait(5000);\ncy.get('[value=\"7\"]').should('be.visible').click();\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst firstName = faker_1.faker.person.firstName();\nconst lastName = faker_1.faker.person.lastName();\nconst fullName = `${firstName} ${lastName}`;\ncy.get('[name=\"ctrl.talent.FirstName\"]').type(firstName);\ncy.get('[name=\"ctrl.talent.LastName\"]').type(lastName);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].CountryId\"]').select('CA - Canada');\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('BC (British Columbia)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\n// cy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.FirstName || ctrl.talent.MiddleName || ctrl.talent.LastName || ctrl.talent.Suffix\"]')\n    .should('be.visible')\n    .invoke('text')\n    .then((displayedText) => {\n    const normalizedText = displayedText.replace(/\\s+/g, ' ').trim();\n    expect(normalizedText).to.eq(fullName);\n});\ncy.wait(7000);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(7000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type(firstName);\ncy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type(lastName);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(2)\n    .invoke('text')\n    .then((firstNameText) => {\n    expect(firstNameText.trim()).to.equal(firstName);\n});\ncy.get('td')\n    .eq(3)\n    .invoke('text')\n    .then((lastNameText) => {\n    expect(lastNameText.trim()).to.equal(lastName);\n});",
              "err": {},
              "uuid": "8e7aaf19-e497-445a-b2f6-14ab7d6f475e",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC005",
              "fullTitle": "Talent & Rights TC005",
              "timedOut": null,
              "duration": 19574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for Agent\n   Expected: System able to create new talent for Agent   */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\ncy.get('[value=\"5\"]').should('be.visible').click();\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst fein = generateRandomNumber2();\nconst feinWithoutHyphens = fein.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.CorporationFein\"]').clear().type(fein);\nconst randomCompanyName = generateRandomCompanyName();\ncy.get('[name=\"ctrl.talent.CorporationName\"]').type(randomCompanyName);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].CountryId\"]').select('CA - Canada');\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('BC (British Columbia)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.CorporationName\"]').contains(randomCompanyName);\ncy.get('dd[ng-show=\"ctrl.talent.CorporationFein\"]').contains(feinWithoutHyphens);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(10000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.CorporationNameSearch\"]').type(randomCompanyName);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(4)\n    .invoke('text')\n    .then((randomCompanyNameText) => {\n    expect(randomCompanyNameText.trim()).to.equal(randomCompanyName);\n});",
              "err": {},
              "uuid": "67146780-b5bf-444c-b4de-5d01e5e2e185",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC006",
              "fullTitle": "Talent & Rights TC006",
              "timedOut": null,
              "duration": 19004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (03/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Create new talent for Vendor\n   Expected: System able to create new talent for Vendor   */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[class=\"btn btn-success\"]').click();\ncy.contains('label', 'Vendor').should('be.visible').find('input[name=\"ctrl.talentType\"][value=\"8\"]').click().should('be.checked');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\nconst fein = generateRandomNumber2();\nconst feinWithoutHyphens = fein.replace(/-/g, '');\ncy.get('[name=\"ctrl.talent.CorporationFein\"]').clear().type(fein);\nconst randomCompanyName = generateRandomCompanyName();\ncy.get('[name=\"ctrl.talent.CorporationName\"]').type(randomCompanyName);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('[name=\"ctrl.talent.Addresses[0].CountryId\"]').select('CA - Canada');\ncy.get('[name=\"ctrl.talent.Addresses[0].Line1\"]').type('No 123, ABC Road');\ncy.get('[name=\"ctrl.talent.Addresses[0].City\"]').type('California');\ncy.get('[name=\"ctrl.talent.Addresses[0].StateId\"]').select('BC (British Columbia)');\ncy.get('[name=\"ctrl.talent.Addresses[0].Zip\"]').type('12345');\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.get('dd[ng-show=\"ctrl.talent.CorporationName\"]').contains(randomCompanyName);\ncy.get('dd[ng-show=\"ctrl.talent.CorporationFein\"]').contains(feinWithoutHyphens);\ncy.get('[class=\"btn btn-primary pull-right ng-scope\"]').click();\ncy.wait(10000);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.CorporationNameSearch\"]').type(randomCompanyName);\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.get('td')\n    .eq(4)\n    .invoke('text')\n    .then((randomCompanyNameText) => {\n    expect(randomCompanyNameText.trim()).to.equal(randomCompanyName);\n});",
              "err": {},
              "uuid": "dc9b9c06-fb1b-408d-a539-528cf32717c5",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC007",
              "fullTitle": "Talent & Rights TC007",
              "timedOut": null,
              "duration": 30937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Adlina (20/3/2025), Hairul (04/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Open existing created data and update address.\n   Expected: System able to update address for existing data\n*/\ncy.fixture('talent-data.json').then((talents) => {\n    cy.visit('/adbridge/cs/Talent/Talent#!/Search');\n    cy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type(talents.corpFName);\n    cy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type(talents.corpLName);\n    cy.get('[class=\"btn btn-primary\"]').contains('Search').click();\n    cy.wait(5000);\n    cy.get('td', { timeout: 60000 })\n        .eq(2)\n        .invoke('text')\n        .then((firstNameText) => {\n        expect(firstNameText.trim()).to.equal(talents.corpFName);\n    });\n    cy.get('td')\n        .eq(3)\n        .invoke('text')\n        .then((lastNameText) => {\n        expect(lastNameText.trim()).to.equal(talents.corpLName);\n    });\n});\ncy.get('[data-original-title=\"Edit Talent\"]').invoke('removeAttr', 'target').contains('Edit').should('be.visible').click();\ncy.get('[class=\"btn btn-success ng-scope\"]').contains('Add New Mailing Address').should('be.visible').click();\ncy.wait(8000);\ncy.get('[class=\"form-control ng-pristine ng-untouched ng-invalid ng-invalid-required\"]')\n    .first()\n    .select('CA - Canada', { force: true });\ncy.get('[class=\"col-md-10\"]').first().type('No 4567, DEF Road');\ncy.get('input[name=\"address.City\"]').then(($input) => {\n    $input.val('New York');\n    $input.trigger('input');\n});\ncy.get('[ng-options=\"state.StateId as state.StateAbbreviation for state in ctrl.states | filter:{ CountryId: address.CountryId}:true\"]')\n    .first()\n    .select('AB');\ncy.get('input[name=\"address.Zip\"]').then(($input) => {\n    $input.val('12345');\n    $input.trigger('input');\n});\ncy.get('[ng-click=\"ctrl.saveTalent()\"]').contains('Save').click();\ncy.wait(10000);",
              "err": {},
              "uuid": "c546aab1-f155-4594-a430-ee4bc574fbbb",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC008",
              "fullTitle": "Talent & Rights TC008",
              "timedOut": null,
              "duration": 12121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Adlina (20/3/2025), Hairul (05/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Open existing created data and verify inactive address is exists\n   Expected: System able to verify inactive address is exists\n*/\ncy.fixture('talent-data.json').then((talents) => {\n    cy.visit('/adbridge/cs/Talent/Talent#!/Search');\n    cy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type(talents.corpFName);\n    cy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type(talents.corpLName);\n    cy.get('[class=\"btn btn-primary\"]').contains('Search').click();\n    cy.wait(5000);\n    cy.get('td', { timeout: 60000 })\n        .eq(2)\n        .invoke('text')\n        .then((firstNameText) => {\n        expect(firstNameText.trim()).to.equal(talents.corpFName);\n    });\n    cy.get('td')\n        .eq(3)\n        .invoke('text')\n        .then((lastNameText) => {\n        expect(lastNameText.trim()).to.equal(talents.corpLName);\n    });\n});\ncy.get('[data-original-title=\"Edit Talent\"]').invoke('removeAttr', 'target').contains('Edit').should('be.visible').click();\ncy.get('[class=\"checkbox\"]').click();\ncy.get('[ng-if=\"address.IsActive\"]').should('not.be.checked');",
              "err": {},
              "uuid": "997ea17e-1f99-477c-861e-04d644b95587",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC009",
              "fullTitle": "Talent & Rights TC009",
              "timedOut": null,
              "duration": 33842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Adlina (20/3/2025), Hairul (04/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Open existing created data and update temporary mailing address.\n   Expected: System able to update temporary mailing address for existing data\n*/\ncy.fixture('talent-data.json').then((talents) => {\n    cy.visit('/adbridge/cs/Talent/Talent#!/Search');\n    cy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type(talents.corpFName);\n    cy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type(talents.corpLName);\n    cy.get('[class=\"btn btn-primary\"]').contains('Search').click();\n    cy.wait(5000);\n    cy.get('td', { timeout: 60000 })\n        .eq(2)\n        .invoke('text')\n        .then((firstNameText) => {\n        expect(firstNameText.trim()).to.equal(talents.corpFName);\n    });\n    cy.get('td')\n        .eq(3)\n        .invoke('text')\n        .then((lastNameText) => {\n        expect(lastNameText.trim()).to.equal(talents.corpLName);\n    });\n});\ncy.get('[data-original-title=\"Edit Talent\"]').invoke('removeAttr', 'target').contains('Edit').should('be.visible').click();\ncy.get('[ng-click=\"ctrl.addAddress(true)\"]').contains('Add New Temporary Address').should('be.visible').click();\ncy.get('[name=\"address.CountryId\"]').first().select('CA - Canada');\ncy.get('[name=\"address.Line1\"]').first().type('No 4567, DEF Road');\ncy.get('[name=\"address.City\"]').first().type('Canada');\ncy.get('[name=\"address.StateId\"]').first().select('AB');\ncy.get('[name=\"address.Zip\"]').first().type('45678');\ncy.get('[ng-click=\"ctrl.saveTalent()\"]').contains('Save').click();\ncy.wait(10000);\ncy.get('[ng-click=\"ctrl.deleteAddress(address)\"]').first().click();\ncy.get('[class=\"btn btn-primary md-info md-close\"]').click();\ncy.get('[ng-click=\"ctrl.saveTalent()\"]').contains('Save').click();\ncy.wait(10000);",
              "err": {},
              "uuid": "233a61aa-7934-47e6-bdb0-01194e259194",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC010",
              "fullTitle": "Talent & Rights TC010",
              "timedOut": null,
              "duration": 19190,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (04/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Open existing created data and update Tax Withholdings, Work Authorizations, Bank Accounts, Address, Garnishments, Misc Deductions, Coogan Deductions, Unions, Wire and recoupments.\n   Expected: System able to update Tax Withholdings, Work Authorizations, Bank Accounts, Address, Garnishments, Misc Deductions, Coogan Deductions, Unions, Wire and recoupments for existing data */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\ncy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type('Hellen');\ncy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type('Jaskolski');\ncy.get('[class=\"btn btn-primary\"]').contains('Search').click();\ncy.wait(7000);\ncy.get('td')\n    .eq(2)\n    .invoke('text')\n    .then((firstNameText) => {\n    expect(firstNameText.trim()).to.equal('Hellen');\n});\ncy.get('td')\n    .eq(3)\n    .invoke('text')\n    .then((lastNameText) => {\n    expect(lastNameText.trim()).to.equal('Jaskolski');\n});\ncy.get('[data-original-title=\"Edit Talent\"]').invoke('removeAttr', 'target').contains('Edit').should('be.visible').click();\ncy.wait(10000);\ncy.get('[href=\"/ps/payee-details/1227916/details\"]').invoke('removeAttr', 'target').contains('Payee').should('be.visible').click();\n// Tax Withholding\ncy.get('[routerlink=\"taxwithholding\"]').contains('Tax Withholding').click();\ncy.get('[title=\"Setup Tax Withholding\"]').click();\ncy.get('[class=\"k-input-inner\"]').last().type('South Australia{enter}');\ncy.get('[class=\"k-button-text\"]').contains('Save').click();\ncy.get('.k-notification-content').should('be.visible').and('contain.text', 'Tax Withholding is being saved');\n// Bank Accounts\ncy.wait(15000);\ncy.get('[routerlink=\"bankaccounts\"]').contains('Bank Accounts').click();\ncy.wait(10000);\ncy.get('[title=\"New Bank Account\"]', { timeout: 60000 }).should('be.visible').and('not.be.disabled').click();\ncy.get('[name=\"routingNumber\"]').type('123456789');\ncy.get('[name=\"accountNumber\"]').type('1234567890');\ncy.get('[name=\"accountType\"]').type('Savings{enter}');\ncy.get('[name=\"bankName\"]').type('SWISS BANK');\ncy.get('[name=\"allocationType\"]').type('Flat{enter}');\ncy.get('[name=\"allocationPercentage\"]').type('25');\ncy.get('[name=\"processingOrder\"]').type('1{enter}');\ncy.get('[class=\"k-button-text\"]').last().click();\n// Address\ncy.wait(15000);\ncy.get('[routerlink=\"address\"]').contains('Address').click();\ncy.wait(7000);\ncy.get('[class=\"btn btn-primary\"]', { timeout: 60000 }).eq(3).should('be.visible').click();\ncy.get('[class=\"k-input-value-text\"]').eq(1).type('Agency Care Of Address{enter}');\ncy.get('[name=\"editable.line1\"]').type('No 65, YUO ROAD');\ncy.get('[name=\"editable.city\"]').type('Canada');\ncy.get('[class=\"k-input-value-text\"]').eq(3).type('California{enter}');\ncy.get('[name=\"editable.zip\"]').type('123456');\ncy.get('[name=\"editable.comments\"]').type('test');\ncy.get('[class=\"btn btn-primary\"]').last().click();\ncy.get('[class=\"k-window-titlebar-action k-dialog-titlebar-action k-button k-icon-button k-button-md k-rounded-md k-button-flat-base k-button-flat\"]').click();\n// Garnishments\ncy.wait(15000);\ncy.get('[routerlink=\"garnishments\"]').contains('Garnishments').click();\ncy.wait(7000);\ncy.get('[title=\"Setup Garnishment\"]', { timeout: 10000 }).should('be.visible').and('not.be.disabled').click();\ncy.get('[class=\"k-input-value-text\"]').first().type('CAN{enter}');\ncy.get('[class=\"k-input-inner\"]').eq(1).type('{backspace}{backspace}{backspace}');\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(1).type('02', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(1).type('09', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(1).type('2025', { delay: 1000 });\ncy.get('[class=\"k-input-inner\"]').eq(2).type('{backspace}{backspace}{backspace}');\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(2).type('02', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(2).type('09', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(2).type('2026', { delay: 1000 });\ncy.get('[class=\"k-input-value-text\"]').eq(1).type('GARNISHMENT-MAX{enter}');\ncy.get('[class=\"k-input-value-text\"]').eq(2).type('Levy{enter}');\ncy.get('[class=\"k-input-value-text\"]').eq(3).type('Once Only{enter}');\ncy.get('[class=\"k-input-inner\"]').last().type('Simo Corp (1181514){enter}');\ncy.get('[class=\"ng-untouched ng-pristine ng-valid\"]').eq(2).type('1');\ncy.get('[class=\"ng-untouched ng-pristine ng-valid\"]').eq(3).type('25');\ncy.get('[class=\"ng-untouched ng-pristine ng-valid\"]').eq(5).type('1');\ncy.get('[class=\"btn btn-primary\"]').last().click();\n// Miscellaneous Deductions\ncy.wait(15000);\ncy.get('[routerlink=\"miscellaneousdeductions\"]').contains('Miscellaneous Deductions').click();\ncy.wait(10000);\ncy.get('[title=\"Setup Miscellaneous Deduction\"]', { delay: 5000 }).and('not.be.disabled').should('be.visible').click();\ncy.get('[class=\"k-input-inner\"]').eq(1).type('Studio Sixty Billion{downArrow}{enter}', { delay: 1000 });\ncy.wait(5000);\ncy.get('[class=\"k-input-inner\"]').eq(4).type('{backspace}{backspace}{backspace}');\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(4).type('02', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(4).type('09', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(4).type('2025', { delay: 1000 });\ncy.get('[class=\"k-input-inner\"]').eq(5).type('{backspace}{backspace}{backspace}');\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(5).type('02', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(5).type('09', { delay: 1000 });\ncy.wait(3000);\ncy.get('[class=\"k-input-inner\"]').eq(5).type('2026', { delay: 1000 });\ncy.get('[name=\"DeductionCodeSelected\"]').type('IA IAP L-123 (511 M IAP){enter}');\ncy.get('[class=\"btn btn-primary\"]').last().click();\ncy.get('[class=\"k-window-titlebar-actions k-dialog-titlebar-actions\"]').click();\n// Unions\ncy.wait(15000);\ncy.get('[routerlink=\"unions\"]').contains('Unions').click();\ncy.wait(10000);\ncy.get('[title=\"Setup Union Membership\"]', { timeout: 10000 }).should('be.visible').and('not.be.disabled').click();\ncy.get('[class=\"k-input-inner\"]').eq(1).type('Studio Sixty Billion{enter}', { delay: 1000 });\n// cy.get('[class=\"k-input-value-text\"]').eq(1).type('');\ncy.get('[class=\"k-input-value-text\"]').eq(2).type('Full Time{enter}');\ncy.get('[class=\"k-picker-md k-rounded-md k-picker-solid k-dropdownlist k-picker ng-untouched ng-pristine ng-valid\"]')\n    .eq(1)\n    .type('Daily');\ncy.get('[class=\"k-input-inner\"]').eq(8).type('Canada{enter}', { delay: 1000 });\ncy.get('input[placeholder=\"-- Select Hire State / Province --\"]')\n    .should('be.visible')\n    .click()\n    .type('Alberta (CA)', { delay: 1000 });\ncy.get('[class=\"k-input-inner\"]').eq(11).type('Aakkâr (LB){enter}', { delay: 1000 });\ncy.get('[class=\"k-input-inner\"]').eq(14).type('Local 112 (112){enter}', { delay: 1000 });\n// cy.get('[class=\"k-input-inner\"]').eq(15).type('');\ncy.get('[class=\"k-input-inner\"]').eq(16).type('1A - SCHEDULE 1A{enter}', { delay: 1000 });\ncy.get('[class=\"k-input-inner\"]').eq(18).type('Dancer{enter}');\ncy.get('[class=\"k-input-inner\"]').eq(19).type('Vendor{enter}');\ncy.get('[class=\"btn btn-primary\"]').last().click();\ncy.contains('button', 'Cancel').click();\ncy.on('window:confirm', (text) => {\n    expect(text).to.contains('Are you sure you want to Cancel and lose your entries?');\n    return true; // Clicks 'OK'\n});\n// Wire\ncy.wait(15000);\ncy.get('[routerlink=\"wire\"]').contains('Wire').click();\ncy.wait(10000);\ncy.get('[class=\"k-input-inner\"]').eq(0).type('United States of America');\ncy.get('[name=\"payeeWire.bankAlias\"]').type('SWISS Bank');\ncy.get('[name=\"payeeWire.bankName\"]').type('SWISS Bank');\ncy.get('[name=\"payeeWire.accountHolderName\"]').type('Test');\ncy.get('[name=\"payeeWire.bankAddress\"]').type('No 9876, WER ROAD');\ncy.get('[name=\"payeeWire.bankCity\"]').type('New York');\ncy.get('[class=\"k-input-inner\"]').eq(2).type('Alabama ');\ncy.get('[name=\"payeeWire.bankZip\"]').type('98765');\ncy.get('[class=\"k-input-inner\"]').last().type('United States of America');\ncy.get('[name=\"payeeWire.bankAccountNumber\"]').type('1234567890');\ncy.get('[name=\"payeeWire.bankRoutingNumber\"]').type('123456789');\ncy.get('[name=\"buttonSave\"]').click();",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `td`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `td`, but never found it.\n    at Context.eval (webpack:///./src/e2e/kl/1000-regression/talent-records-TC1001-TC1066.cy.ts:504:0)",
                "diff": null
              },
              "uuid": "939fdeb5-7e42-470e-a9db-e1a5e3d87b50",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC011",
              "fullTitle": "Talent & Rights TC011",
              "timedOut": null,
              "duration": 16608,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Adlina (20/03/2025), Hairul (05/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent and Rights --> Talent Records\n   2. Open existing created data and update inactive data\n   Expected: System able to update inactive data */\ncy.fixture('talent-data.json').then((talents) => {\n    cy.visit('/adbridge/cs/Talent/Talent#!/Search');\n    cy.get('[name=\"ctrl.talentSearchCriteria.FirstNameSearch\"]').type(talents.corpFName);\n    cy.get('[name=\"ctrl.talentSearchCriteria.LastNameSearch\"]').type(talents.corpLName);\n    cy.get('[class=\"btn btn-primary\"]').contains('Search').click();\n    cy.wait(5000);\n    cy.get('td', { timeout: 60000 })\n        .eq(2)\n        .invoke('text')\n        .then((firstNameText) => {\n        expect(firstNameText.trim()).to.equal(talents.corpFName);\n    });\n    cy.get('td')\n        .eq(3)\n        .invoke('text')\n        .then((lastNameText) => {\n        expect(lastNameText.trim()).to.equal(talents.corpLName);\n    });\n});\ncy.get('[data-original-title=\"Edit Talent\"]').invoke('removeAttr', 'target').contains('Edit').should('be.visible').click();\n// cy.wait(7000);\ncy.get('[data-target=\"#accordionAddresses1\"]').click();\ncy.get('[title=\"Set this address as Active\"]').should('not.be.checked');\ncy.get('[name=\"address.CountryId\"]').last().select('CA - Canada');\ncy.get('[name=\"address.Line1\"]').last().clear().type('No 123, ABE Modified');\ncy.get('[name=\"address.City\"]').last().clear().type('California Modified');\ncy.get('[name=\"address.StateId\"]').last().select('AB');\ncy.get('[name=\"address.Zip\"]').last().clear().type('67891');\ncy.get('[ng-click=\"ctrl.saveTalent()\"]').contains('Save').click();",
              "err": {},
              "uuid": "fe9408ab-a8fc-4a3e-b607-69eb88dc5cf1",
              "parentUUID": "2a075cd1-6cac-42c1-a565-06c7b22f4f52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd9985b9-c1e9-4765-b93f-c8d755620d82",
            "ac4fd52f-879a-439f-a016-a2c3e41a9bc1",
            "4844d68b-ff8c-4deb-92e1-41fef3766a10",
            "8e7aaf19-e497-445a-b2f6-14ab7d6f475e",
            "67146780-b5bf-444c-b4de-5d01e5e2e185",
            "dc9b9c06-fb1b-408d-a539-528cf32717c5",
            "c546aab1-f155-4594-a430-ee4bc574fbbb",
            "997ea17e-1f99-477c-861e-04d644b95587",
            "233a61aa-7934-47e6-bdb0-01194e259194",
            "fe9408ab-a8fc-4a3e-b607-69eb88dc5cf1"
          ],
          "failures": [
            "939fdeb5-7e42-470e-a9db-e1a5e3d87b50"
          ],
          "pending": [],
          "skipped": [],
          "duration": 256784,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "dd1556db-0e62-4647-80c3-c3efa85715e6",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1035-TC1036.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1035-TC1036.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "34fb36e5-f6ae-44fc-8071-df03e9f3aff4",
          "title": "Talent-Records",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1035-TC1036.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1035-TC1036.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1035",
              "fullTitle": "Talent-Records TC1035",
              "timedOut": null,
              "duration": 6810,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (06/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Records\n    2. The ability to block save of a talent record if the only address is temporary\n    When there's just a temporary address for a talent record and TM tries to save it,\n    will now see a warning message that actually blocks the TM from saving the record.\n    Also an active address cannot be delete from UI\n    SSN: 355388813\n    ROSE GIDEON\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('adbridge/tal/Talent/Talent#!/Edit/530437');\ncy.get('.page-heading h1', { timeout: 90000 }).should('be.visible');\ncy.get('a.btn.btn-sm.btn-default.ng-scope', { timeout: 90000 }).should('be.visible').click();\ncy.get('.md-content', { timeout: 90000 }).should('contain.text', 'You cannot delete an active address');\ncy.get('.md-buttons .btn-primary.md-info.md-close', { timeout: 90000 }).should('be.visible').click();",
              "err": {},
              "uuid": "8978b902-deb3-4285-a9b2-490e594d90e1",
              "parentUUID": "34fb36e5-f6ae-44fc-8071-df03e9f3aff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1036",
              "fullTitle": "Talent-Records TC1036",
              "timedOut": null,
              "duration": 1239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (06/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Talent Record - Audit Log\n    Talent record audit log will now capture field that was updated (from and to value),\n    date/time of update, user who updated the record\n    */\ncy.get('a[href=\"#talentManagement-tab-talentAudits\"]', { timeout: 90000 }).should('be.visible').click();\ncy.get('table.table-striped tbody tr', { timeout: 90000 }).should('be.visible');\ncy.contains('td', 'ALAIN TestAutomation').should('be.visible');\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "08357e84-620a-4ec5-8188-e9bb571d974a",
              "parentUUID": "34fb36e5-f6ae-44fc-8071-df03e9f3aff4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8978b902-deb3-4285-a9b2-490e594d90e1",
            "08357e84-620a-4ec5-8188-e9bb571d974a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8049,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b0330698-c552-47fe-ad85-93813d1dda08",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1047.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1047.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "38df3545-131f-4ca6-b637-eb1edf0e2c5c",
          "title": "Talent-Records",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-records-TC1047.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-records-TC1047.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1047",
              "fullTitle": "Talent-Records TC1047",
              "timedOut": null,
              "duration": 43117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (07/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Records\n    2. Add direct deposit indicator in talent record\n    add a direct deposit indicator that will be manually entered by the talent manager\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/tal/Talent/Talent#!/Edit/530437');\ncy.get('div.page-heading', { timeout: 90000 }).first().should('be.visible');\ncy.get('li.ng-scope a[href=\"#talentManagement-tab-bankInfo\"]', { timeout: 90000 })\n    .should('exist')\n    .should('be.visible')\n    .and('contain', 'Bank Info')\n    .click();\ncy.get('label.data-head', { timeout: 90000 }).each(($el) => {\n    if ($el.text().trim() === 'Direct Deposit') {\n        cy.wrap($el)\n            .invoke('attr', 'for')\n            .then((forValue) => {\n            cy.log(`Found Direct Deposit=\"${forValue}\"`);\n        });\n    }\n});\n//Click Payee\nCypress.config('pageLoadTimeout', 120000);\ncy.get('a.btn.btn-primary.ng-scope', { timeout: 90000 })\n    .contains('Payee')\n    .should('be.visible')\n    .then(($a) => {\n    const url = $a.prop('href'); // Get the actual URL\n    cy.visit('/ps/payee-details/1221879/details'); // Force navigation to the URL\n});\ncy.get('div.col-sm-3', { timeout: 90000 }).should('be.visible');\ncy.get('a.slug-link[href=\"/ps/payee-details/1221879/workauthorizations\"]', { timeout: 90000 })\n    .should('be.visible')\n    .and('contain', 'Work Authorizations')\n    .click();\n//Click EDIT\ncy.get('a.btn.btn-primary.btn-sm.mr-2', { timeout: 90000 })\n    .should('have.attr', 'title', 'Edit Work Authorization')\n    .should('be.visible')\n    .within(() => {\n    cy.get('i.fa.fa-edit', { timeout: 90000 }).should('be.visible');\n})\n    .click({ force: true });\ncy.wait(7000); //loading\ncy.get('span.k-window-title.k-dialog-title', { timeout: 90000 })\n    .should('be.visible')\n    .and('have.text', 'Add/Edit Payee Work Authorization');\ncy.get('input[name=\"workAuthorization.chooseDirectDeposit\"]', { timeout: 90000 }).should('exist').scrollIntoView();\ncy.get('input[name=\"workAuthorization.chooseDirectDeposit\"]', { timeout: 90000 })\n    .should('have.prop', 'checked')\n    .then((isChecked) => {\n    if (isChecked) {\n        cy.log('✅ Direct Deposit checkbox is CHECKED');\n    }\n    else {\n        cy.log('❌ Direct Deposit checkbox is NOT checked');\n    }\n});\ncy.get('button.btn.btn-secondary', { timeout: 90000 })\n    .should('be.visible')\n    .and('have.text', 'Cancel')\n    .and('have.attr', 'type', 'button')\n    .and('have.attr', 'tabindex', '-1')\n    .click();\ncy.get('table.table-striped.table-sm.sortable-theme-bootstrap', { timeout: 90000 })\n    .should('be.visible')\n    .within(() => {\n    cy.get('thead.thead-default.thead-sm').should('be.visible');\n    cy.get('tbody').should('exist');\n});\n// Get and log the column header \"DD\"\ncy.get('th[title=\"Direct Deposit\"]', { timeout: 90000 })\n    .should('be.visible')\n    .invoke('text')\n    .then((columnText) => {\n    cy.log('Column Header Text:', columnText.trim()); // Trim extra spaces\n});\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "9a68edcb-c94f-4782-a4bd-083575579d50",
              "parentUUID": "38df3545-131f-4ca6-b637-eb1edf0e2c5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a68edcb-c94f-4782-a4bd-083575579d50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43117,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2338e66b-1017-4151-a8dc-5a4dde95b35f",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1030.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1030.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c3d99ef1-469f-4a64-b1ff-87b0cb09887d",
          "title": "Talent-Reference",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1030.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1030.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1030",
              "fullTitle": "Talent-Reference TC1030",
              "timedOut": null,
              "duration": 16809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (06/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent REference\n    2. Error Creating New Agent Record \tAble to create and save new agent record\n    Ticket 534428:\n    Talent Reference > Talent Agent Search > Create New Agent\n    When adding new talent agents to Talent Reference, you get a red error message that\n    the account has not been created/that there has been a problem.\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/tal/Talent/Talent#!/Search');\ncy.contains('h1', 'Talent', { timeout: 90000 }).should('be.visible');\ncy.get('a.btn.btn-success[ng-click=\"ctrl.createTalent()\"]', { timeout: 90000 }).should('be.visible').click({ force: true });\ncy.get('h4.modal-title', { timeout: 90000 }).contains('Add New Talent').should('be.visible');\ncy.get('input[type=\"radio\"][name=\"ctrl.talentType\"][value=\"5\"]', { timeout: 90000 }).should('be.visible').check();\ncy.get('a.btn.btn-primary.pull-right.ng-scope[ng-click=\"ctrl.next()\"]', { timeout: 90000 }).should('be.visible').click();\nconst fakeFein = faker_1.faker.finance.routingNumber(); // Simulated Federal ID\nconst fakeCorpName = faker_1.faker.company.name(); // Simulated Corporation Name\ncy.get('input.form-control[ng-model=\"ctrl.talent.CorporationFein\"]', { timeout: 90000 }).should('be.visible').type(fakeFein);\ncy.get('input.form-control[ng-model=\"ctrl.talent.CorporationName\"]', { timeout: 90000 }).should('be.visible').type(fakeCorpName);\ncy.get('a.btn.btn-primary.pull-right.ng-scope[ng-click=\"ctrl.next()\"]', { timeout: 90000 })\n    .should('exist')\n    .invoke('show')\n    .click({ force: true });\ncy.get('select[name=\"ctrl.talent.Addresses[0].CountryId\"]', { timeout: 90000 }).select('US - United States of America');\ncy.get('input[name=\"ctrl.talent.Addresses[0].Line1\"]', { timeout: 90000 }).type('123 Main Street');\ncy.get('input[name=\"ctrl.talent.Addresses[0].City\"]', { timeout: 90000 }).type('Texas');\ncy.get('select[name=\"ctrl.talent.Addresses[0].StateId\"]', { timeout: 90000 }).select('TX (Texas)');\ncy.get('input[name=\"ctrl.talent.Addresses[0].Zip\"]', { timeout: 90000 }).type('75001');\ncy.get('a.btn.btn-primary.pull-right.ng-scope', { timeout: 90000 }).contains('Continue').click();\ncy.get('dt').contains('Corporation Name', { timeout: 90000 }).should('be.visible');\ncy.get('dd').contains(fakeFein, { timeout: 90000 }).should('be.visible');\ncy.get('dt').contains('Federal ID', { timeout: 90000 }).should('be.visible');\ncy.get('dd').contains(fakeCorpName, { timeout: 90000 }).should('be.visible');\ncy.get('a.btn.btn-primary.pull-right.ng-scope', { timeout: 90000 }).contains('Create Talent').should('be.visible').click();\ncy.log('✅ No error messages detected.');\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "13342884-67c7-4580-a3d5-de66ceb0efd9",
              "parentUUID": "c3d99ef1-469f-4a64-b1ff-87b0cb09887d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13342884-67c7-4580-a3d5-de66ceb0efd9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16809,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bd41c394-d3a3-483f-bb07-37e9c7649997",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1037.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1037.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d524311-f19a-40d3-890e-740c6a9120db",
          "title": "Talent-Reference",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1037.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-reference-TC1037.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1037",
              "fullTitle": "Talent-Reference TC1037",
              "timedOut": null,
              "duration": 4948,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (06/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent REference\n    2. Overtime Rules by State for Non-Union Sessions\n    new tab (Overtime rules) is under Talent reference.\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/tal/talent/reference');\ncy.get('h1', { timeout: 90000 }).should('contain', 'Talent Reference');\ncy.get('a[data-toggle=\"tab\"][href=\"#OvertimeRules\"]', { timeout: 90000 }).should('be.visible').click();\nconst expectedValues = {\n    WeeklyRegularHoursLimit: '40',\n    DailyRegularHoursLimit: '12',\n    SecondTierRate: '1.5',\n    SecondTierHoursLimit: 'None',\n    ThirdTierRate: 'None',\n    Day7RegularHoursLimit: '12',\n    Day7RegularRate: '1',\n    Day7SecondTierRate: '1.5'\n};\ncy.log('Checking constant values and calculations...');\ncy.get('#StateId', { timeout: 90000 }).should('be.visible').select('Colorado');\ncy.log('State selected: Colorado');\ncy.get('a.calculate-overtime-rules', { timeout: 90000 }).click();\ncy.log('Expected values:');\ncy.log('Weekly Regular Hours Limit: ' + expectedValues.WeeklyRegularHoursLimit);\ncy.log('Daily Regular Hours Limit: ' + expectedValues.DailyRegularHoursLimit);\ncy.log('Second Tier Rate: ' + expectedValues.SecondTierRate);\ncy.log('Second Tier Hours Limit: ' + expectedValues.SecondTierHoursLimit);\ncy.log('Third Tier Rate: ' + expectedValues.ThirdTierRate);\ncy.log('Day 7 Regular Hours Limit: ' + expectedValues.Day7RegularHoursLimit);\ncy.log('Day 7 Regular Rate: ' + expectedValues.Day7RegularRate);\ncy.log('Day 7 Second Tier Rate: ' + expectedValues.Day7SecondTierRate);\n// Verify the values using constants and compare them\ncy.get('#WeeklyRegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValues.WeeklyRegularHoursLimit)\n    .then(() => cy.log('Verified Weekly Regular Hours Limit.'));\ncy.get('#DailyRegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValues.DailyRegularHoursLimit)\n    .then(() => cy.log('Verified Daily Regular Hours Limit.'));\ncy.get('#SecondTierRate')\n    .invoke('val')\n    .should('eq', expectedValues.SecondTierRate)\n    .then(() => cy.log('Verified Second Tier Rate.'));\ncy.get('#SecondTierHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValues.SecondTierHoursLimit)\n    .then(() => cy.log('Verified Second Tier Hours Limit.'));\ncy.get('#ThirdTierRate')\n    .invoke('val')\n    .should('eq', expectedValues.ThirdTierRate)\n    .then(() => cy.log('Verified Third Tier Rate.'));\ncy.get('#Day7RegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValues.Day7RegularHoursLimit)\n    .then(() => cy.log('Verified Day 7 Regular Hours Limit.'));\ncy.get('#Day7RegularRate')\n    .invoke('val')\n    .should('eq', expectedValues.Day7RegularRate)\n    .then(() => cy.log('Verified Day 7 Regular Rate.'));\ncy.get('#Day7SecondTierRate')\n    .invoke('val')\n    .should('eq', expectedValues.Day7SecondTierRate)\n    .then(() => cy.log('Verified Day 7 Second Tier Rate.'));\n//clear selection\nconst expectedValuesNevada = {\n    WeeklyRegularHoursLimit: '40',\n    DailyRegularHoursLimit: '8',\n    SecondTierRate: '1.5',\n    SecondTierHoursLimit: 'None',\n    ThirdTierRate: 'None',\n    Day7RegularHoursLimit: '8',\n    Day7RegularRate: '1',\n    Day7SecondTierRate: '1.5'\n};\ncy.log('Checking constant values and calculations for Nevada...');\ncy.get('#StateId', { timeout: 90000 }).should('be.visible').select('Nevada');\ncy.log('State selected: Nevada');\ncy.get('a.calculate-overtime-rules', { timeout: 90000 }).click();\n// Log the expected values for Nevada\ncy.log('Expected values for Nevada:');\ncy.log('Weekly Regular Hours Limit: ' + expectedValuesNevada.WeeklyRegularHoursLimit);\ncy.log('Daily Regular Hours Limit: ' + expectedValuesNevada.DailyRegularHoursLimit);\ncy.log('Second Tier Rate: ' + expectedValuesNevada.SecondTierRate);\ncy.log('Second Tier Hours Limit: ' + expectedValuesNevada.SecondTierHoursLimit);\ncy.log('Third Tier Rate: ' + expectedValuesNevada.ThirdTierRate);\ncy.log('Day 7 Regular Hours Limit: ' + expectedValuesNevada.Day7RegularHoursLimit);\ncy.log('Day 7 Regular Rate: ' + expectedValuesNevada.Day7RegularRate);\ncy.log('Day 7 Second Tier Rate: ' + expectedValuesNevada.Day7SecondTierRate);\n// Verify the values using constants and compare them\ncy.get('#WeeklyRegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.WeeklyRegularHoursLimit)\n    .then(() => cy.log('Verified Weekly Regular Hours Limit.'));\ncy.get('#DailyRegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.DailyRegularHoursLimit)\n    .then(() => cy.log('Verified Daily Regular Hours Limit.'));\ncy.get('#SecondTierRate')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.SecondTierRate)\n    .then(() => cy.log('Verified Second Tier Rate.'));\ncy.get('#SecondTierHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.SecondTierHoursLimit)\n    .then(() => cy.log('Verified Second Tier Hours Limit.'));\ncy.get('#ThirdTierRate')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.ThirdTierRate)\n    .then(() => cy.log('Verified Third Tier Rate.'));\ncy.get('#Day7RegularHoursLimit')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.Day7RegularHoursLimit)\n    .then(() => cy.log('Verified Day 7 Regular Hours Limit.'));\ncy.get('#Day7RegularRate')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.Day7RegularRate)\n    .then(() => cy.log('Verified Day 7 Regular Rate.'));\ncy.get('#Day7SecondTierRate')\n    .invoke('val')\n    .should('eq', expectedValuesNevada.Day7SecondTierRate)\n    .then(() => cy.log('Verified Day 7 Second Tier Rate.'));\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {
                "message": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                "estack": "TypeError: The following error originated from your application code, not from Cypress.\n\n  > Cannot read properties of null (reading 'UnionContractYear')\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n    at Object.<anonymous> (https://app.uat2-extremereach.com/adbridge/tal/talent/reference:3382:66)\n    at Object.<anonymous> (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43860)\n    at fire (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:42035)\n    at Object.fireWith [as resolveWith] (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:43186)\n    at done (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:128488)\n    at XMLHttpRequest.callback (https://app.uat2-extremereach.com/Content/app/build/v6/base-coco-6.0.0.min.js?16.11.1:1:134223)",
                "diff": null
              },
              "uuid": "a742460f-36c0-4c8b-8c26-4bdcf5b3f63f",
              "parentUUID": "0d524311-f19a-40d3-890e-740c6a9120db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a742460f-36c0-4c8b-8c26-4bdcf5b3f63f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c236856e-c425-4fdb-a0ea-a5f144ab6e43",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-rights-TC1017-TC1031.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-rights-TC1017-TC1031.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "24ce81e4-7078-4cec-bfe5-79efc71bdd44",
          "title": "Talent-Rights",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-rights-TC1017-TC1031.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-rights-TC1017-TC1031.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1017",
              "fullTitle": "Talent-Rights TC1017",
              "timedOut": null,
              "duration": 11538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (05/02/2025)\nModule : Talent Rights Regression\nHigh Level Test Step :\n1. Visit Talent & Rights page\n2. Hide the On/Off button in Rights so it Can Not be Selected.\n\"Rights will appear in:Rights\nCommercial Master Rights Tab\nCompletion Report Rights Tab\nSession Report Rights Tab\"\nComments from ticket # 514109\n 1) A user with \"Edit talent notifications\" permission will be able to ON/Off the notifications using the\n stop notifications or resume notifications option under the save right drop down.\n 2) A user without this permission will not see \"Stop or resume notifications\" option under the save right drop down\n 3) Notifications on/off button is visible but not clickable if user does not have permission. Business will need to assign permissions to roles/teams as needed. See attachments for screenshots.\nHide the notifications on/off button behind a permission (permission name should fall under talent and rights - \"View/Edit Rights Notifications\")\nNotifications on/off button is visible but not clickable if user does not have permission\\\nOnce permission is created, business will be responsible for assigning permissions to roles/teams as needed\n*/\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('tal/rights-search');\ncy.get('h1.page-title', { timeout: 90000 }).should('be.visible').and('have.text', 'Rights Search');\ncy.get('[data-cy=\"rights-id-input\"]', { timeout: 90000 }).should('be.visible').type('102763');\ncy.get('button[aria-label=\"Select\"]', { timeout: 90000 }).should('be.visible').first().click();\ncy.get('.k-list', { timeout: 90000 }).should('be.visible');\ncy.get('.k-list-item', { timeout: 90000 }).contains('Celebrity Guarantee').click();\ncy.get('table.k-table', { timeout: 90000 }).should('be.visible');\ncy.visit('tal/rights-details/102763');\ncy.get('h1.page-title').should('be.visible').and('contain.text', 'Right 102763 Details');\n//Notifications on/off button is visible but not clickable if user does not have permission\ncy.get('span.k-link.ng-star-inserted', { timeout: 90000 })\n    .should('be.visible')\n    .should('contain.text', 'Notifications')\n    .find('span')\n    .should('have.text', ' ON')\n    .click();\ncy.get('kendo-icon-wrapper.k-icon-wrapper-host', { timeout: 90000 }).find('kendo-icon.k-i-caret-alt-down').click();\ncy.contains('Stop or resume notifications', { timeout: 90000 }).should('not.exist');\n//A user without this permission will not see \"Stop or resume notifications\" option under the save right drop down",
              "err": {},
              "uuid": "bff611e4-1203-40bc-aec6-99dfca7f6a77",
              "parentUUID": "24ce81e4-7078-4cec-bfe5-79efc71bdd44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1031",
              "fullTitle": "Talent-Rights TC1031",
              "timedOut": null,
              "duration": 9294,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\nLast Updated : Rosnisa (06/02/2025)\nModule : Talent Rights Regression\nHigh Level Test Step :\n1. Visit Talent & Rights page\n2. Error message when entering Licensor/Licensee Phone # for a Right\nShouldnt see any error message\n */\ncy.visit('/tal/rights-search');\ncy.get('a[href=\"/tal/rights-details/create\"]', { timeout: 90000 }).invoke('removeAttr', 'target').click();\ncy.get('h1 span', { timeout: 90000 }).should('be.visible').contains('Create New Right').click();\ncy.contains('span.link-label', 'Licensor:', { timeout: 90000 }).should('be.visible').click();\ncy.get('span.k-window-title.k-dialog-title', { timeout: 90000 })\n    .should('be.visible')\n    .and('have.text', 'Licensor / Licensee Information');\n//Licensor / Rights Owner\ncy.fillLicensorForm({\n    name: 'John Doe',\n    country: 'United States of America',\n    address: '123 Main St',\n    city: 'New York',\n    state: 'NY',\n    postalCode: '10001',\n    phone: '(312)-231-1234',\n    email: 'john.doe@example.com'\n});\n//Licensee / Rights Holder\ncy.fillLicenseeForm({\n    name: 'Jane Doe',\n    country: 'Algeria',\n    address: '123 Main St',\n    city: 'London',\n    state: 'London',\n    postalCode: '10001',\n    phone: '(+213) 555 123 456 ',\n    email: 'jane.doe@example.com'\n});\ncy.contains('button', 'Update', { timeout: 90000 }).should('be.visible').click();\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "e145eb87-dd88-4a0f-8fa4-cfce120f77bf",
              "parentUUID": "24ce81e4-7078-4cec-bfe5-79efc71bdd44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bff611e4-1203-40bc-aec6-99dfca7f6a77",
            "e145eb87-dd88-4a0f-8fa4-cfce120f77bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20832,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "68e17517-453b-4b4f-974a-67b2ea829960",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-rights-payroll-TC1027.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-rights-payroll-TC1027.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8cc3f78c-57c2-4e77-8d6e-3cdf8bf4664f",
          "title": "Talent-Payroll",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-rights-payroll-TC1027.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-rights-payroll-TC1027.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1027",
              "fullTitle": "Talent-Payroll TC1027",
              "timedOut": null,
              "duration": 7272,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (10/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Payroll History\n    2. Add Void Flag and Remittance Type\n    Payroll History on the Talent record and the Talent Payment should show Void and Remittance type columns\n      */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/Talent/Talent/#!/Edit/132622');\ncy.get('h1', { timeout: 90000 }).should('be.visible');\ncy.get('a[href=\"#talentManagement-tab-payrollHistory\"]', { timeout: 90000 }).should('be.visible').click({ force: true });\ncy.get('table.table.table-striped.table-condensed tbody tr', { timeout: 90000 })\n    .should('have.length.at.least', 1)\n    .then(() => cy.log('✅ Table has at least one row'));\ncy.get('th.sortable', { timeout: 90000 })\n    .contains('Void')\n    .should('be.visible')\n    .then(() => cy.log('✅ Header \"Void\" is available'));\ncy.get('th.sortable', { timeout: 90000 })\n    .contains('Remittance Type')\n    .should('be.visible')\n    .then(() => cy.log('✅ Header \"Remittance Type\" is available'));\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "2c9cdc7c-f8d6-43ac-861d-0fa7e33eb73b",
              "parentUUID": "8cc3f78c-57c2-4e77-8d6e-3cdf8bf4664f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c9cdc7c-f8d6-43ac-861d-0fa7e33eb73b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ce38ea8c-38bb-4e9a-babb-ef120e902435",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-search-TC1023.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-search-TC1023.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42a48093-fa20-4ba1-a3f4-8ecdd5338d0a",
          "title": "Talent-Search",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-search-TC1023.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-search-TC1023.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1023",
              "fullTitle": "Talent-Search TC1023",
              "timedOut": null,
              "duration": 8449,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Last Updated : Rosnisa (05/02/2025)\n    Module : Talent Rights Regressions\n    High Level Test Step :\n    1. Visit Talent & Rights page > Talent Search\n    2. enter multiple TALENT IDs in the SEARCH screen\n    461804, 454203, 454202, 454921, 407243, 395799, 467637, 463043, 278000, 453200\n    */\ncy.clearCookies();\ncy.clearAllSessionStorage();\nconst userName = Cypress.env('PLATFORM_USER_USERNAME_PAYROLL_TALENT_AND_RIGHTS');\nconst password = Cypress.env('PLATFORM_USER_PASSWORD_PAYROLL_TALENT_AND_RIGHTS');\ncy.userLoginWithAspectRatio(userName, password);\ncy.visit('/adbridge/cs/Talent/Talent#!/Search');\nconst talentIds = ['461804', '454203', '454202', '454921', '407243', '395799', '467637', '463043', '278000', '453200'];\ncy.get('input[name=\"ctrl.talentSearchCriteria.TalentIds\"]', { timeout: 5000 })\n    .should('be.visible')\n    .click()\n    .type(talentIds.join(', '));\ncy.get('button.btn.btn-primary', { timeout: 5000 }).should('be.visible').contains('Search').click();\ncy.get('table.table-striped tbody tr td:first-child').then(($cells) => {\n    const extractedTalentIds = [...$cells].map((el) => el.innerText.trim());\n    cy.log('Extracted Talent IDs: ', JSON.stringify(extractedTalentIds, null, 2));\n    cy.log('Expected Talent IDs: ', JSON.stringify(talentIds, null, 2));\n});\ncy.get('[data-cy=\"er-profile-button\"]').should('be.visible').click();\ncy.get('a[data-clear-session-storage]').should('be.visible').click();",
              "err": {},
              "uuid": "34e0a4f9-de77-4902-85f4-74635ecf271e",
              "parentUUID": "42a48093-fa20-4ba1-a3f4-8ecdd5338d0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34e0a4f9-de77-4902-85f4-74635ecf271e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8449,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9822028a-17ec-4de1-8b97-37b56aaea095",
      "title": "",
      "fullFile": "src\\e2e\\kl\\1000-regression\\talent-ttr-TC1033-TC1034.cy.ts",
      "file": "src\\e2e\\kl\\1000-regression\\talent-ttr-TC1033-TC1034.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4892f5be-a99e-4c2a-a75a-feeb79bab61a",
          "title": "Talent TTR",
          "fullFile": "src\\e2e\\kl\\1000-regression\\talent-ttr-TC1033-TC1034.cy.ts",
          "file": "src\\e2e\\kl\\1000-regression\\talent-ttr-TC1033-TC1034.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1033",
              "fullTitle": "Talent TTR TC1033",
              "timedOut": null,
              "duration": 44378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (17/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent & Rights --> Documents\n   2. Create new Document in PDF\n   Expected: System able to Create new Document in PDF */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Documents#!/CSSearch');\ncy.get('[class=\"btn btn-success\"]', { timeout: 10000 }).should('be.visible').click();\ncy.wait(15000);\ncy.get('[name=\"document.AdvertiserId\"]', { timeout: 10000 }).select('Extreme Reach Talent Payroll');\ncy.get('.attach-document').click();\ncy.wait(5000);\ncy.get('input[type=\"file\"]').selectFile('src/fixtures/fakefile.pdf', { force: true });\ncy.wait(5000);\ncy.get('[class=\"formbutton start-upload no-clear btn btn-primary\"]', { timeout: 10000 }).should('not.be.disabled').click();\ncy.wait(5000);\ncy.get('[class=\"btn btn-primary ng-scope\"]', { timeout: 10000 }).should('not.be.disabled').click();\ncy.wait(5000);\ncy.get('tbody > :nth-child(2) > :nth-child(1) > a').contains('fakefile.pdf');\ncy.get('[class=\"ng-binding\"]', { timeout: 10000 }).should('be.visible').contains('Submitted');",
              "err": {},
              "uuid": "0eb48a08-9dec-4c4b-80c6-04178616baf4",
              "parentUUID": "4892f5be-a99e-4c2a-a75a-feeb79bab61a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC1034",
              "fullTitle": "Talent TTR TC1034",
              "timedOut": null,
              "duration": 51631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Module: Talent & Rights\n   Last Updated: Hairul (17/02/2025)\n   High-Level Steps:\n   1. Login and navigate to Talent & Rights --> Documents\n   2. Create new Document in Excel\n   Expected: System able to Create new Document in Excel */\n// navigateToSystemDefaults();\ncy.visit('/adbridge/cs/Talent/Documents#!/CSSearch');\ncy.get('[class=\"btn btn-success\"]', { timeout: 10000 }).should('be.visible').click();\ncy.wait(5000);\ncy.get('[name=\"document.AdvertiserId\"]', { timeout: 15000 }).should('be.visible').select('Extreme Reach Talent Payroll');\ncy.get('.attach-document').click();\ncy.wait(5000);\ncy.get('input[type=\"file\"]').selectFile('src/fixtures/sample-talent-right-document.xls', { force: true });\ncy.wait(5000);\ncy.get('[class=\"formbutton start-upload no-clear btn btn-primary\"]', { timeout: 10000 }).should('not.be.disabled').click();\ncy.wait(15000);\ncy.get('[class=\"btn btn-primary ng-scope\"]', { timeout: 10000 }).should('not.be.disabled').click();\ncy.wait(15000);\ncy.get('tbody > :nth-child(2) > :nth-child(1) > a').contains('sample-talent-right-document.xls');\ncy.get('[class=\"ng-binding\"]', { timeout: 10000 }).should('be.visible').contains('Submitted');",
              "err": {},
              "uuid": "bade3ce4-0cdf-49b4-9e14-ea1467a84e2b",
              "parentUUID": "4892f5be-a99e-4c2a-a75a-feeb79bab61a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0eb48a08-9dec-4c4b-80c6-04178616baf4",
            "bade3ce4-0cdf-49b4-9e14-ea1467a84e2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96009,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1e3a9fa8-0b71-498a-8985-19952655045b",
      "title": "",
      "fullFile": "src\\e2e\\kl\\100-notification\\notification-TC1-TC89.cy.ts",
      "file": "src\\e2e\\kl\\100-notification\\notification-TC1-TC89.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "57ea4dd5-7976-4a38-8656-db10d945acac",
          "title": "Verify Notification URL Test",
          "fullFile": "src\\e2e\\kl\\100-notification\\notification-TC1-TC89.cy.ts",
          "file": "src\\e2e\\kl\\100-notification\\notification-TC1-TC89.cy.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC0001",
              "fullTitle": "Verify Notification URL Test TC0001",
              "timedOut": null,
              "duration": 7778,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c16b885f-9557-4399-9330-43f6e99d3ca6",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0002",
              "fullTitle": "Verify Notification URL Test TC0002",
              "timedOut": null,
              "duration": 3811,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "bd5d5c14-6c08-49f4-839c-0193ce84c547",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0003",
              "fullTitle": "Verify Notification URL Test TC0003",
              "timedOut": null,
              "duration": 3020,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "4271cda4-f50f-4f17-bec8-ceca01ddd48e",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0004",
              "fullTitle": "Verify Notification URL Test TC0004",
              "timedOut": null,
              "duration": 1507,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "d6c1d05d-38dc-4524-9c18-bf90e58f5005",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0005",
              "fullTitle": "Verify Notification URL Test TC0005",
              "timedOut": null,
              "duration": 2366,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "fec46e49-f77e-4ddc-b33a-21f4d5e6b394",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0006",
              "fullTitle": "Verify Notification URL Test TC0006",
              "timedOut": null,
              "duration": 4167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "0e313c7a-4cd3-45b2-aa85-2ed28c914935",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0007",
              "fullTitle": "Verify Notification URL Test TC0007",
              "timedOut": null,
              "duration": 689,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "5bd3fb28-12ee-4ff7-a69e-aea2ca845f62",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0008",
              "fullTitle": "Verify Notification URL Test TC0008",
              "timedOut": null,
              "duration": 1731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "5b7c7998-1920-4f06-85f4-303ea8e5fb53",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0009",
              "fullTitle": "Verify Notification URL Test TC0009",
              "timedOut": null,
              "duration": 2538,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "ab98b7b3-94a9-444e-a5d7-65b187bc2ea8",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0010",
              "fullTitle": "Verify Notification URL Test TC0010",
              "timedOut": null,
              "duration": 904,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "70aa8075-4ec2-4791-b17e-4c77e47662e2",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0011",
              "fullTitle": "Verify Notification URL Test TC0011",
              "timedOut": null,
              "duration": 4288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "26b3b258-2156-43e1-8e9e-60856f1596ae",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0012",
              "fullTitle": "Verify Notification URL Test TC0012",
              "timedOut": null,
              "duration": 2895,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "ba4a17e9-58d5-4512-b534-1df343232a38",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0013",
              "fullTitle": "Verify Notification URL Test TC0013",
              "timedOut": null,
              "duration": 2785,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "748ff075-4635-44b9-9607-ff47933c4f31",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0014",
              "fullTitle": "Verify Notification URL Test TC0014",
              "timedOut": null,
              "duration": 3901,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "223e3de4-81d0-4769-9cd5-a47694f9ca2e",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0015",
              "fullTitle": "Verify Notification URL Test TC0015",
              "timedOut": null,
              "duration": 292,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/TalentExpirationsCycle?notificationTypeId=43&cmId=1031648&talentAdviceUseTypeId=1270&daysTillExpiration=60&today=12/3/2024&paymentTypeId=0\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/TalentExpirationsCycle?notificationTypeId=43&cmId=1031648&talentAdviceUseTypeId=1270&daysTillExpiration=60&today=12/3/2024&paymentTypeId=0\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "516812e6-59e3-45d1-8277-846c2aec4140",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0016",
              "fullTitle": "Verify Notification URL Test TC0016",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "9663324b-05ec-4f0a-8caf-9f6ca754ffd4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0017",
              "fullTitle": "Verify Notification URL Test TC0017",
              "timedOut": null,
              "duration": 2010,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "436fa81b-d39a-4c83-ae2a-9703012c215d",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0018",
              "fullTitle": "Verify Notification URL Test TC0018",
              "timedOut": null,
              "duration": 2567,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "d7abd982-8ef6-4b40-afcc-5bcd2b8b5a99",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0019",
              "fullTitle": "Verify Notification URL Test TC0019",
              "timedOut": null,
              "duration": 5251,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "b133638e-c70c-4eef-ac24-97b3757c8269",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0020",
              "fullTitle": "Verify Notification URL Test TC0020",
              "timedOut": null,
              "duration": 1293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "aa5530f8-f9f2-4aa0-8473-94fd29f30675",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0021",
              "fullTitle": "Verify Notification URL Test TC0021",
              "timedOut": null,
              "duration": 2453,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "8a16789f-46e5-4cd0-91e7-7553760a68a5",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0022",
              "fullTitle": "Verify Notification URL Test TC0022",
              "timedOut": null,
              "duration": 3983,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "3ec69879-08a4-4885-93d1-310716cbf78c",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0023",
              "fullTitle": "Verify Notification URL Test TC0023",
              "timedOut": null,
              "duration": 771,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "5d806550-58e7-4e59-9dd4-6d0629df14b9",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0024",
              "fullTitle": "Verify Notification URL Test TC0024",
              "timedOut": null,
              "duration": 3347,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "83c50be2-7ef3-4107-8ad8-af18f5206983",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0025",
              "fullTitle": "Verify Notification URL Test TC0025",
              "timedOut": null,
              "duration": 1541,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "3aaf3b9c-c5b7-4731-807f-35aa96ddae7b",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0026",
              "fullTitle": "Verify Notification URL Test TC0026",
              "timedOut": null,
              "duration": 2515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "5497a6ec-dc11-468c-b85d-9308027ac05e",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0027",
              "fullTitle": "Verify Notification URL Test TC0027",
              "timedOut": null,
              "duration": 459,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "fd0e9465-1319-44fa-97ce-1915a331a082",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0028",
              "fullTitle": "Verify Notification URL Test TC0028",
              "timedOut": null,
              "duration": 945,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "290a1cf7-5429-47c2-8da0-c421c81b1698",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0029",
              "fullTitle": "Verify Notification URL Test TC0029",
              "timedOut": null,
              "duration": 1179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c1508f7d-5fdc-498f-a103-f6e88c5e6a8e",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0030",
              "fullTitle": "Verify Notification URL Test TC0030",
              "timedOut": null,
              "duration": 17705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "a30eb5ed-53ca-43e5-8fb2-f6f1b4cdae17",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0031",
              "fullTitle": "Verify Notification URL Test TC0031",
              "timedOut": null,
              "duration": 3694,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "2a3fb1ab-3ec7-4f68-90fc-8255104fffb0",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0032",
              "fullTitle": "Verify Notification URL Test TC0032",
              "timedOut": null,
              "duration": 2464,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c82f7987-66a8-44fa-91e4-70e470489305",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0033",
              "fullTitle": "Verify Notification URL Test TC0033",
              "timedOut": null,
              "duration": 414,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "737ee6b0-20f9-4578-aeb0-99606754c308",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0034",
              "fullTitle": "Verify Notification URL Test TC0034",
              "timedOut": null,
              "duration": 1203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "44a747f5-0f2f-4001-bc24-1aa497ffbd81",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0035",
              "fullTitle": "Verify Notification URL Test TC0035",
              "timedOut": null,
              "duration": 296,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/c7514570-97ea-40f4-a623-fc07265f1abe?CustomerId=12528&MediaObjectId=fa54a9ee-a0e0-45b7-b9f4-599d4c3205bd&FailedQcReasonIds=148\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/c7514570-97ea-40f4-a623-fc07265f1abe?CustomerId=12528&MediaObjectId=fa54a9ee-a0e0-45b7-b9f4-599d4c3205bd&FailedQcReasonIds=148\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "952cfd31-00b1-4f4e-b127-6cfaaf11d2f1",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0036",
              "fullTitle": "Verify Notification URL Test TC0036",
              "timedOut": null,
              "duration": 1284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "2feafbb2-0dcd-444f-82ca-493bc6c8a6a5",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0037",
              "fullTitle": "Verify Notification URL Test TC0037",
              "timedOut": null,
              "duration": 2146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c26685e7-8130-4023-bf2a-2e8181cbe794",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0038",
              "fullTitle": "Verify Notification URL Test TC0038",
              "timedOut": null,
              "duration": 3429,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "9270618b-1c12-41ff-bdb5-752ee7dd84e6",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0039",
              "fullTitle": "Verify Notification URL Test TC0039",
              "timedOut": null,
              "duration": 1188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "bd243a93-6788-445a-a12a-8d1eb9eadf17",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0040",
              "fullTitle": "Verify Notification URL Test TC0040",
              "timedOut": null,
              "duration": 322,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "ca3b55c1-9c7d-41aa-94af-631628bcc0f5",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0041",
              "fullTitle": "Verify Notification URL Test TC0041",
              "timedOut": null,
              "duration": 362,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/TalentExpirationsCycle?notificationTypeId=139&cmId=1031648&talentAdviceUseTypeId=1270&daysTillExpiration=60&today=12/3/2024&paymentTypeId=0\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/TalentExpirationsCycle?notificationTypeId=139&cmId=1031648&talentAdviceUseTypeId=1270&daysTillExpiration=60&today=12/3/2024&paymentTypeId=0\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "6ba7b3c6-9c6e-48d4-9633-4c6abb9583c4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0042",
              "fullTitle": "Verify Notification URL Test TC0042",
              "timedOut": null,
              "duration": 451,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/SendForReview/179445\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/SendForReview/179445\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "6c69f2cb-4250-404f-9c17-83e6248601e4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0043",
              "fullTitle": "Verify Notification URL Test TC0043",
              "timedOut": null,
              "duration": 1356,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "d989eb48-69af-47b7-af4f-bea667585eda",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0044",
              "fullTitle": "Verify Notification URL Test TC0044",
              "timedOut": null,
              "duration": 1418,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "40e78f33-36f4-423b-b060-1e98dc759d9c",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0045",
              "fullTitle": "Verify Notification URL Test TC0045",
              "timedOut": null,
              "duration": 4370,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "9de7a3fc-449a-4d60-83c9-e01f9af479c9",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0046",
              "fullTitle": "Verify Notification URL Test TC0046",
              "timedOut": null,
              "duration": 316,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/3387ca81-ac88-4863-b745-e5dfa643152c?CustomerId=130353&MediaObjectId=05956d40-3380-473a-9653-88227983b156&FailedQcReasonIds=0\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/3387ca81-ac88-4863-b745-e5dfa643152c?CustomerId=130353&MediaObjectId=05956d40-3380-473a-9653-88227983b156&FailedQcReasonIds=0\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "80baaecb-1431-43b6-8dab-e10c619d9ed6",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0047",
              "fullTitle": "Verify Notification URL Test TC0047",
              "timedOut": null,
              "duration": 1437,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "2dc20cb4-87d3-4d94-aeac-747df6146bae",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0048",
              "fullTitle": "Verify Notification URL Test TC0048",
              "timedOut": null,
              "duration": 2598,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "5cb303e0-f70a-4184-936b-946aaaeb115c",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0049",
              "fullTitle": "Verify Notification URL Test TC0049",
              "timedOut": null,
              "duration": 397,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/MediaOnHoldQcNotification/b208bb05-bdd1-4cec-a199-81a7a87113c0?CustomerId=9423&MediaObjectId=66c822a3-9561-411e-b52d-52913125fbed&FailedQcReasonIds=166\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/MediaOnHoldQcNotification/b208bb05-bdd1-4cec-a199-81a7a87113c0?CustomerId=9423&MediaObjectId=66c822a3-9561-411e-b52d-52913125fbed&FailedQcReasonIds=166\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "2a8cb5a0-dcab-448c-821e-9aa87de4eeb8",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0050",
              "fullTitle": "Verify Notification URL Test TC0050",
              "timedOut": null,
              "duration": 561,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "8d91492b-3672-4dd2-8200-817c80bcf523",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0051",
              "fullTitle": "Verify Notification URL Test TC0051",
              "timedOut": null,
              "duration": 2158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "191432e6-4a68-44c7-b6a1-554dde255bd2",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0052",
              "fullTitle": "Verify Notification URL Test TC0052",
              "timedOut": null,
              "duration": 36731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "9f05b3c6-6f30-465f-9137-b238bccfcd94",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0053",
              "fullTitle": "Verify Notification URL Test TC0053",
              "timedOut": null,
              "duration": 1135,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "ba269dd1-b2c9-446e-8629-c045dd61a0b6",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0054",
              "fullTitle": "Verify Notification URL Test TC0054",
              "timedOut": null,
              "duration": 3530,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "7eaa0bb3-7036-468c-930c-ee678e7bfd43",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0055",
              "fullTitle": "Verify Notification URL Test TC0055",
              "timedOut": null,
              "duration": 964,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "174931a2-a21c-4b70-8d32-7dd813e7157c",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0056",
              "fullTitle": "Verify Notification URL Test TC0056",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "98bdb212-936f-4a2c-bddb-295e05ed25ff",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0057",
              "fullTitle": "Verify Notification URL Test TC0057",
              "timedOut": null,
              "duration": 882,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c1f626cb-f076-411e-8fa1-a6bb57495696",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0058",
              "fullTitle": "Verify Notification URL Test TC0058",
              "timedOut": null,
              "duration": 5454,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "3eefb8f6-fe54-4882-87f3-90369a6cf607",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0059",
              "fullTitle": "Verify Notification URL Test TC0059",
              "timedOut": null,
              "duration": 3277,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "604e86ad-1fed-4985-bf7c-0f23f03d264e",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0060",
              "fullTitle": "Verify Notification URL Test TC0060",
              "timedOut": null,
              "duration": 1255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c8903cfe-8381-4ada-ae9a-04c9dcc9dbc7",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0061",
              "fullTitle": "Verify Notification URL Test TC0061",
              "timedOut": null,
              "duration": 2284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "35929c1b-9ad1-465c-87fa-3da0badeaf55",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0062",
              "fullTitle": "Verify Notification URL Test TC0062",
              "timedOut": null,
              "duration": 258,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c2a9dcac-5a62-48ec-91a8-8af52b02ae42",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0063",
              "fullTitle": "Verify Notification URL Test TC0063",
              "timedOut": null,
              "duration": 1485,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "9d6fe4a5-1bea-4ede-9716-232c022764c1",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0064",
              "fullTitle": "Verify Notification URL Test TC0064",
              "timedOut": null,
              "duration": 1378,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "df48152b-be09-4595-89b4-7e482384805a",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0065",
              "fullTitle": "Verify Notification URL Test TC0065",
              "timedOut": null,
              "duration": 3630,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "b32c8e7f-4496-42c7-8722-aad36783163c",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0066",
              "fullTitle": "Verify Notification URL Test TC0066",
              "timedOut": null,
              "duration": 1671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "4a0ddf8a-2005-45c8-9025-dcf1f8baa3a4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0068",
              "fullTitle": "Verify Notification URL Test TC0068",
              "timedOut": null,
              "duration": 1865,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "284722af-d268-4a8e-b3e7-97ea2839da59",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0069",
              "fullTitle": "Verify Notification URL Test TC0069",
              "timedOut": null,
              "duration": 4031,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "d93b93fc-5ca1-47b8-bef0-a9ac0709bf50",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0070",
              "fullTitle": "Verify Notification URL Test TC0070",
              "timedOut": null,
              "duration": 1061,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "7b696ede-c639-4b89-b7e9-e9dc2f796dfc",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0071",
              "fullTitle": "Verify Notification URL Test TC0071",
              "timedOut": null,
              "duration": 263,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "940419c3-0fe4-4c56-aa9e-3db2e52cef96",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0072",
              "fullTitle": "Verify Notification URL Test TC0072",
              "timedOut": null,
              "duration": 1877,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "2df3a12a-54a3-4164-8f64-325b55ee58d5",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0073",
              "fullTitle": "Verify Notification URL Test TC0073",
              "timedOut": null,
              "duration": 379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "da73b8ad-9c6e-46da-ac9d-55a5493d43df",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0074",
              "fullTitle": "Verify Notification URL Test TC0074",
              "timedOut": null,
              "duration": 1380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "e9348289-8df1-4f90-bb16-0fb619aca14a",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0075",
              "fullTitle": "Verify Notification URL Test TC0075",
              "timedOut": null,
              "duration": 1138,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "e7c96b18-c015-4eca-b32f-49d2ff604aaa",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0076",
              "fullTitle": "Verify Notification URL Test TC0076",
              "timedOut": null,
              "duration": 6518,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c9760c44-7236-4bee-8917-a1b99eb88e75",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0077",
              "fullTitle": "Verify Notification URL Test TC0077",
              "timedOut": null,
              "duration": 1423,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "c91b1465-035b-453b-b61e-283fa58905f4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0078",
              "fullTitle": "Verify Notification URL Test TC0078",
              "timedOut": null,
              "duration": 962,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "79436944-8693-4912-a45a-58ebbdb2eb74",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0079",
              "fullTitle": "Verify Notification URL Test TC0079",
              "timedOut": null,
              "duration": 3450,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "30efcdf0-7def-4d7b-a9f7-4acab68af400",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0080",
              "fullTitle": "Verify Notification URL Test TC0080",
              "timedOut": null,
              "duration": 845,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "72867d69-8917-4cd6-a61a-99df810b3d78",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0081",
              "fullTitle": "Verify Notification URL Test TC0081",
              "timedOut": null,
              "duration": 2748,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "59deb8d7-e91e-4f76-86f7-97f80fbbf6a4",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0082",
              "fullTitle": "Verify Notification URL Test TC0082",
              "timedOut": null,
              "duration": 854,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "2c60302b-413c-45aa-b2d8-50abcc418b17",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0083",
              "fullTitle": "Verify Notification URL Test TC0083",
              "timedOut": null,
              "duration": 689,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "1c72c5a0-9f7d-4065-b679-2913ab75a55a",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0084",
              "fullTitle": "Verify Notification URL Test TC0084",
              "timedOut": null,
              "duration": 221,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {},
              "uuid": "7bd4c462-f8a9-4a6f-8c25-3cb2d2d9c901",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC0086",
              "fullTitle": "Verify Notification URL Test TC0086",
              "timedOut": null,
              "duration": 303,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/*\n    Module: Vendor Payment - Notification\n    Last Updated: Minsi (7/1/2025)\n\n    High Level Test Steps:\n    1. Verify the notification page can be loaded and contains the keywords\n    2. Verify the header and footer of the notification page\n    */\n//const baseUrl = this.initializationConfig.websiteUrl;\n//cy.visit(`${baseUrl}${config.url}`);\ncy.visit(`${config.url}`);\nconfig.assertions.forEach((assertion) => {\n    /*  cy.get(assertion.selector)\n  .should(\"contain\", assertion.expectedText)\n  .next()\n  .should('contain', assertion.expectedValue);*/\n    // Verify the notification page contains the keywords\n    cy.get(assertion.selector)\n        .should('contain', assertion.expectedText)\n        .then(($el) => {\n        if (assertion.expectedValue) {\n            cy.wrap($el).next().should('contain', assertion.expectedValue);\n        }\n        else {\n            cy.log('No expectedValue provided, skipping sibling check.');\n        }\n    });\n    // Verify the notification page contains XR Header\n    // Some notification contains different header\n    // so skipHeaderCheck is set to true\n    if (!config.skipHeaderCheck) {\n        cy.get('img[alt=\"Extreme Reach\"]').should('be.visible');\n    }\n    else {\n        cy.log('Header check is skipped.');\n    }\n    // Verify the notification page contains XR Footer\n    // Some notification has no footer\n    // so skipFooterCheck is set to true in testdata.json\n    if (!config.skipFooterCheck) {\n        cy.get('div').should('contain', 'Extreme Reach, Inc.');\n    }\n    else {\n        cy.log('Footer check is skipped.');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/737e3155-d7e2-4003-9e1d-599ce24c8519?CustomerId=25644&MediaObjectId=3d47b165-d7d5-4e1e-8afc-4b693edd5028&FailedQcReasonIds=%7BFailedQcReasonIds%7D\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttps://app.uat2-extremereach.com/Email/UploaderFailedQcNotification/737e3155-d7e2-4003-9e1d-599ce24c8519?CustomerId=25644&MediaObjectId=3d47b165-d7d5-4e1e-8afc-4b693edd5028&FailedQcReasonIds=%7BFailedQcReasonIds%7D\n\nThe response we received from your web server was:\n\n  > 500: Internal Server Error\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131591:76)\n    at visitFailedByErr (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131006:12)\n    at <unknown> (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:131574:13)\n    at tryCatcher (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1830:23)\n    at Promise._settlePromiseFromHandler (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1542:31)\n    at Promise._settlePromise (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1599:18)\n    at Promise._settlePromise0 (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1644:10)\n    at Promise._settlePromises (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:1720:18)\n    at _drainQueueStep (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2430:12)\n    at _drainQueue (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2423:9)\n    at Async._drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2439:5)\n    at Async.drainQueues (https://app.uat2-extremereach.com/__cypress/runner/cypress_runner.js:2309:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./src/e2e/kl/100-notification/notification-TC1-TC89.cy.ts:19:0)",
                "diff": null
              },
              "uuid": "fa67b446-f809-4b82-909a-3bbd1ad985f8",
              "parentUUID": "57ea4dd5-7976-4a38-8656-db10d945acac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c16b885f-9557-4399-9330-43f6e99d3ca6",
            "bd5d5c14-6c08-49f4-839c-0193ce84c547",
            "4271cda4-f50f-4f17-bec8-ceca01ddd48e",
            "d6c1d05d-38dc-4524-9c18-bf90e58f5005",
            "fec46e49-f77e-4ddc-b33a-21f4d5e6b394",
            "0e313c7a-4cd3-45b2-aa85-2ed28c914935",
            "5bd3fb28-12ee-4ff7-a69e-aea2ca845f62",
            "5b7c7998-1920-4f06-85f4-303ea8e5fb53",
            "ab98b7b3-94a9-444e-a5d7-65b187bc2ea8",
            "70aa8075-4ec2-4791-b17e-4c77e47662e2",
            "26b3b258-2156-43e1-8e9e-60856f1596ae",
            "ba4a17e9-58d5-4512-b534-1df343232a38",
            "748ff075-4635-44b9-9607-ff47933c4f31",
            "223e3de4-81d0-4769-9cd5-a47694f9ca2e",
            "9663324b-05ec-4f0a-8caf-9f6ca754ffd4",
            "436fa81b-d39a-4c83-ae2a-9703012c215d",
            "d7abd982-8ef6-4b40-afcc-5bcd2b8b5a99",
            "b133638e-c70c-4eef-ac24-97b3757c8269",
            "aa5530f8-f9f2-4aa0-8473-94fd29f30675",
            "8a16789f-46e5-4cd0-91e7-7553760a68a5",
            "3ec69879-08a4-4885-93d1-310716cbf78c",
            "5d806550-58e7-4e59-9dd4-6d0629df14b9",
            "83c50be2-7ef3-4107-8ad8-af18f5206983",
            "3aaf3b9c-c5b7-4731-807f-35aa96ddae7b",
            "5497a6ec-dc11-468c-b85d-9308027ac05e",
            "fd0e9465-1319-44fa-97ce-1915a331a082",
            "290a1cf7-5429-47c2-8da0-c421c81b1698",
            "c1508f7d-5fdc-498f-a103-f6e88c5e6a8e",
            "a30eb5ed-53ca-43e5-8fb2-f6f1b4cdae17",
            "2a3fb1ab-3ec7-4f68-90fc-8255104fffb0",
            "c82f7987-66a8-44fa-91e4-70e470489305",
            "737ee6b0-20f9-4578-aeb0-99606754c308",
            "44a747f5-0f2f-4001-bc24-1aa497ffbd81",
            "2feafbb2-0dcd-444f-82ca-493bc6c8a6a5",
            "c26685e7-8130-4023-bf2a-2e8181cbe794",
            "9270618b-1c12-41ff-bdb5-752ee7dd84e6",
            "bd243a93-6788-445a-a12a-8d1eb9eadf17",
            "ca3b55c1-9c7d-41aa-94af-631628bcc0f5",
            "d989eb48-69af-47b7-af4f-bea667585eda",
            "40e78f33-36f4-423b-b060-1e98dc759d9c",
            "9de7a3fc-449a-4d60-83c9-e01f9af479c9",
            "2dc20cb4-87d3-4d94-aeac-747df6146bae",
            "5cb303e0-f70a-4184-936b-946aaaeb115c",
            "8d91492b-3672-4dd2-8200-817c80bcf523",
            "191432e6-4a68-44c7-b6a1-554dde255bd2",
            "9f05b3c6-6f30-465f-9137-b238bccfcd94",
            "ba269dd1-b2c9-446e-8629-c045dd61a0b6",
            "7eaa0bb3-7036-468c-930c-ee678e7bfd43",
            "174931a2-a21c-4b70-8d32-7dd813e7157c",
            "98bdb212-936f-4a2c-bddb-295e05ed25ff",
            "c1f626cb-f076-411e-8fa1-a6bb57495696",
            "3eefb8f6-fe54-4882-87f3-90369a6cf607",
            "604e86ad-1fed-4985-bf7c-0f23f03d264e",
            "c8903cfe-8381-4ada-ae9a-04c9dcc9dbc7",
            "35929c1b-9ad1-465c-87fa-3da0badeaf55",
            "c2a9dcac-5a62-48ec-91a8-8af52b02ae42",
            "9d6fe4a5-1bea-4ede-9716-232c022764c1",
            "df48152b-be09-4595-89b4-7e482384805a",
            "b32c8e7f-4496-42c7-8722-aad36783163c",
            "4a0ddf8a-2005-45c8-9025-dcf1f8baa3a4",
            "284722af-d268-4a8e-b3e7-97ea2839da59",
            "d93b93fc-5ca1-47b8-bef0-a9ac0709bf50",
            "7b696ede-c639-4b89-b7e9-e9dc2f796dfc",
            "940419c3-0fe4-4c56-aa9e-3db2e52cef96",
            "2df3a12a-54a3-4164-8f64-325b55ee58d5",
            "da73b8ad-9c6e-46da-ac9d-55a5493d43df",
            "e9348289-8df1-4f90-bb16-0fb619aca14a",
            "e7c96b18-c015-4eca-b32f-49d2ff604aaa",
            "c9760c44-7236-4bee-8917-a1b99eb88e75",
            "c91b1465-035b-453b-b61e-283fa58905f4",
            "79436944-8693-4912-a45a-58ebbdb2eb74",
            "30efcdf0-7def-4d7b-a9f7-4acab68af400",
            "72867d69-8917-4cd6-a61a-99df810b3d78",
            "59deb8d7-e91e-4f76-86f7-97f80fbbf6a4",
            "2c60302b-413c-45aa-b2d8-50abcc418b17",
            "1c72c5a0-9f7d-4065-b679-2913ab75a55a",
            "7bd4c462-f8a9-4a6f-8c25-3cb2d2d9c901"
          ],
          "failures": [
            "516812e6-59e3-45d1-8277-846c2aec4140",
            "952cfd31-00b1-4f4e-b127-6cfaaf11d2f1",
            "6ba7b3c6-9c6e-48d4-9633-4c6abb9583c4",
            "6c69f2cb-4250-404f-9c17-83e6248601e4",
            "80baaecb-1431-43b6-8dab-e10c619d9ed6",
            "2a8cb5a0-dcab-448c-821e-9aa87de4eeb8",
            "fa67b446-f809-4b82-909a-3bbd1ad985f8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 215439,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "..\\..\\..\\..\\cypress\\results\\mochawesome\\ui\\payroll\\talent-and-rights\\.jsons",
        "charts": true,
        "reportPageTitle": "ER Test Suite - UI - Payroll/TalentAndRights",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveJson": true,
        "ignoreVideos": false,
        "saveAllAttempts": false,
        "videoOnFailOnly": false,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}